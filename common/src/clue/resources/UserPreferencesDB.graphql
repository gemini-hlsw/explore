
"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "exploreChartType"
"""
type ExploreChartType {
  id: String!
}

"""
aggregated selection of "exploreChartType"
"""
type ExploreChartTypeAggregate {
  aggregate: ExploreChartTypeAggregateFields
  nodes: [ExploreChartType!]!
}

"""
aggregate fields of "exploreChartType"
"""
type ExploreChartTypeAggregateFields {
  count(columns: [ExploreChartTypeSelectColumn!], distinct: Boolean): Int!
  max: ExploreChartTypeMaxFields
  min: ExploreChartTypeMinFields
}

"""
Boolean expression to filter rows from the table "exploreChartType". All fields are combined with a logical 'AND'.
"""
input ExploreChartTypeBoolExp {
  _and: [ExploreChartTypeBoolExp!]
  _not: ExploreChartTypeBoolExp
  _or: [ExploreChartTypeBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "exploreChartType"
"""
enum ExploreChartTypeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  exploreChartType_pkey
}

enum ExploreChartTypeEnum {
  S2N_CHART
  SIGNAL_CHART
}

"""
Boolean expression to compare columns of type "ExploreChartTypeEnum". All fields are combined with logical 'AND'.
"""
input ExploreChartTypeEnumComparisonExp {
  _eq: ExploreChartTypeEnum
  _in: [ExploreChartTypeEnum!]
  _isNull: Boolean
  _neq: ExploreChartTypeEnum
  _nin: [ExploreChartTypeEnum!]
}

"""
input type for inserting data into table "exploreChartType"
"""
input ExploreChartTypeInsertInput {
  id: String
}

"""aggregate max on columns"""
type ExploreChartTypeMaxFields {
  id: String
}

"""aggregate min on columns"""
type ExploreChartTypeMinFields {
  id: String
}

"""
response of any mutation on the table "exploreChartType"
"""
type ExploreChartTypeMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ExploreChartType!]!
}

"""
on_conflict condition type for table "exploreChartType"
"""
input ExploreChartTypeOnConflict {
  constraint: ExploreChartTypeConstraint!
  update_columns: [ExploreChartTypeUpdateColumn!]! = []
  where: ExploreChartTypeBoolExp
}

"""Ordering options when selecting data from "exploreChartType"."""
input ExploreChartTypeOrderBy {
  id: OrderBy
}

"""primary key columns input for table: exploreChartType"""
input ExploreChartTypePkColumnsInput {
  id: String!
}

"""
select columns of table "exploreChartType"
"""
enum ExploreChartTypeSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "exploreChartType"
"""
input ExploreChartTypeSetInput {
  id: String
}

"""
update columns of table "exploreChartType"
"""
enum ExploreChartTypeUpdateColumn {
  """column name"""
  id
}

input ExploreChartTypeUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: ExploreChartTypeSetInput
  where: ExploreChartTypeBoolExp!
}

"""
columns and relationships of "exploreFinderChart"
"""
type ExploreFinderChart {
  attachmentId: String!
  flipX: Boolean!
  flipY: Boolean!
  inverted: Boolean!
  observationId: String!
  rotate: Int!
  scaleX: Int!
  scaleY: Int!
}

"""
aggregated selection of "exploreFinderChart"
"""
type ExploreFinderChartAggregate {
  aggregate: ExploreFinderChartAggregateFields
  nodes: [ExploreFinderChart!]!
}

"""
aggregate fields of "exploreFinderChart"
"""
type ExploreFinderChartAggregateFields {
  avg: ExploreFinderChartAvgFields
  count(columns: [ExploreFinderChartSelectColumn!], distinct: Boolean): Int!
  max: ExploreFinderChartMaxFields
  min: ExploreFinderChartMinFields
  stddev: ExploreFinderChartStddevFields
  stddevPop: ExploreFinderChartStddev_popFields
  stddevSamp: ExploreFinderChartStddev_sampFields
  sum: ExploreFinderChartSumFields
  varPop: ExploreFinderChartVar_popFields
  varSamp: ExploreFinderChartVar_sampFields
  variance: ExploreFinderChartVarianceFields
}

"""
order by aggregate values of table "exploreFinderChart"
"""
input ExploreFinderChartAggregateOrderBy {
  avg: exploreFinderChart_avg_order_by
  count: OrderBy
  max: exploreFinderChart_max_order_by
  min: exploreFinderChart_min_order_by
  stddev: exploreFinderChart_stddev_order_by
  stddev_pop: exploreFinderChart_stddev_pop_order_by
  stddev_samp: exploreFinderChart_stddev_samp_order_by
  sum: exploreFinderChart_sum_order_by
  var_pop: exploreFinderChart_var_pop_order_by
  var_samp: exploreFinderChart_var_samp_order_by
  variance: exploreFinderChart_variance_order_by
}

"""
input type for inserting array relation for remote table "exploreFinderChart"
"""
input ExploreFinderChartArrRelInsertInput {
  data: [ExploreFinderChartInsertInput!]!

  """upsert condition"""
  onConflict: ExploreFinderChartOnConflict
}

"""aggregate avg on columns"""
type ExploreFinderChartAvgFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""
Boolean expression to filter rows from the table "exploreFinderChart". All fields are combined with a logical 'AND'.
"""
input ExploreFinderChartBoolExp {
  _and: [ExploreFinderChartBoolExp!]
  _not: ExploreFinderChartBoolExp
  _or: [ExploreFinderChartBoolExp!]
  attachmentId: StringComparisonExp
  flipX: BooleanComparisonExp
  flipY: BooleanComparisonExp
  inverted: BooleanComparisonExp
  observationId: StringComparisonExp
  rotate: IntComparisonExp
  scaleX: IntComparisonExp
  scaleY: IntComparisonExp
}

"""
unique or primary key constraints on table "exploreFinderChart"
"""
enum ExploreFinderChartConstraint {
  """
  unique or primary key constraint on columns "observationId", "attachmentId"
  """
  exploreFinderChart_pkey
}

"""
input type for incrementing numeric columns in table "exploreFinderChart"
"""
input ExploreFinderChartIncInput {
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""
input type for inserting data into table "exploreFinderChart"
"""
input ExploreFinderChartInsertInput {
  attachmentId: String
  flipX: Boolean
  flipY: Boolean
  inverted: Boolean
  observationId: String
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""aggregate max on columns"""
type ExploreFinderChartMaxFields {
  attachmentId: String
  observationId: String
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""aggregate min on columns"""
type ExploreFinderChartMinFields {
  attachmentId: String
  observationId: String
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""
response of any mutation on the table "exploreFinderChart"
"""
type ExploreFinderChartMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ExploreFinderChart!]!
}

"""
on_conflict condition type for table "exploreFinderChart"
"""
input ExploreFinderChartOnConflict {
  constraint: ExploreFinderChartConstraint!
  update_columns: [ExploreFinderChartUpdateColumn!]! = []
  where: ExploreFinderChartBoolExp
}

"""Ordering options when selecting data from "exploreFinderChart"."""
input ExploreFinderChartOrderBy {
  attachmentId: OrderBy
  flipX: OrderBy
  flipY: OrderBy
  inverted: OrderBy
  observationId: OrderBy
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""primary key columns input for table: exploreFinderChart"""
input ExploreFinderChartPkColumnsInput {
  attachmentId: String!
  observationId: String!
}

"""
select columns of table "exploreFinderChart"
"""
enum ExploreFinderChartSelectColumn {
  """column name"""
  attachmentId

  """column name"""
  flipX

  """column name"""
  flipY

  """column name"""
  inverted

  """column name"""
  observationId

  """column name"""
  rotate

  """column name"""
  scaleX

  """column name"""
  scaleY
}

"""
input type for updating data in table "exploreFinderChart"
"""
input ExploreFinderChartSetInput {
  attachmentId: String
  flipX: Boolean
  flipY: Boolean
  inverted: Boolean
  observationId: String
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""aggregate stddev on columns"""
type ExploreFinderChartStddevFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""aggregate stddev_pop on columns"""
type ExploreFinderChartStddev_popFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""aggregate stddev_samp on columns"""
type ExploreFinderChartStddev_sampFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""aggregate sum on columns"""
type ExploreFinderChartSumFields {
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""
update columns of table "exploreFinderChart"
"""
enum ExploreFinderChartUpdateColumn {
  """column name"""
  attachmentId

  """column name"""
  flipX

  """column name"""
  flipY

  """column name"""
  inverted

  """column name"""
  observationId

  """column name"""
  rotate

  """column name"""
  scaleX

  """column name"""
  scaleY
}

input ExploreFinderChartUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ExploreFinderChartIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ExploreFinderChartSetInput
  where: ExploreFinderChartBoolExp!
}

"""aggregate var_pop on columns"""
type ExploreFinderChartVar_popFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""aggregate var_samp on columns"""
type ExploreFinderChartVar_sampFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""aggregate variance on columns"""
type ExploreFinderChartVarianceFields {
  rotate: Float
  scaleX: Float
  scaleY: Float
}

"""
columns and relationships of "explorePlotRange"
"""
type ExplorePlotRange {
  id: String!
}

"""
aggregated selection of "explorePlotRange"
"""
type ExplorePlotRangeAggregate {
  aggregate: ExplorePlotRangeAggregateFields
  nodes: [ExplorePlotRange!]!
}

"""
aggregate fields of "explorePlotRange"
"""
type ExplorePlotRangeAggregateFields {
  count(columns: [ExplorePlotRangeSelectColumn!], distinct: Boolean): Int!
  max: ExplorePlotRangeMaxFields
  min: ExplorePlotRangeMinFields
}

"""
Boolean expression to filter rows from the table "explorePlotRange". All fields are combined with a logical 'AND'.
"""
input ExplorePlotRangeBoolExp {
  _and: [ExplorePlotRangeBoolExp!]
  _not: ExplorePlotRangeBoolExp
  _or: [ExplorePlotRangeBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "explorePlotRange"
"""
enum ExplorePlotRangeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  explorePlotRange_pkey
}

enum ExplorePlotRangeEnum {
  NIGHT
  SEMESTER
}

"""
Boolean expression to compare columns of type "ExplorePlotRangeEnum". All fields are combined with logical 'AND'.
"""
input ExplorePlotRangeEnumComparisonExp {
  _eq: ExplorePlotRangeEnum
  _in: [ExplorePlotRangeEnum!]
  _isNull: Boolean
  _neq: ExplorePlotRangeEnum
  _nin: [ExplorePlotRangeEnum!]
}

"""
input type for inserting data into table "explorePlotRange"
"""
input ExplorePlotRangeInsertInput {
  id: String
}

"""aggregate max on columns"""
type ExplorePlotRangeMaxFields {
  id: String
}

"""aggregate min on columns"""
type ExplorePlotRangeMinFields {
  id: String
}

"""
response of any mutation on the table "explorePlotRange"
"""
type ExplorePlotRangeMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ExplorePlotRange!]!
}

"""
on_conflict condition type for table "explorePlotRange"
"""
input ExplorePlotRangeOnConflict {
  constraint: ExplorePlotRangeConstraint!
  update_columns: [ExplorePlotRangeUpdateColumn!]! = []
  where: ExplorePlotRangeBoolExp
}

"""Ordering options when selecting data from "explorePlotRange"."""
input ExplorePlotRangeOrderBy {
  id: OrderBy
}

"""primary key columns input for table: explorePlotRange"""
input ExplorePlotRangePkColumnsInput {
  id: String!
}

"""
select columns of table "explorePlotRange"
"""
enum ExplorePlotRangeSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "explorePlotRange"
"""
input ExplorePlotRangeSetInput {
  id: String
}

"""
update columns of table "explorePlotRange"
"""
enum ExplorePlotRangeUpdateColumn {
  """column name"""
  id
}

input ExplorePlotRangeUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: ExplorePlotRangeSetInput
  where: ExplorePlotRangeBoolExp!
}

"""
columns and relationships of "explorePlotTime"
"""
type ExplorePlotTime {
  id: String!
}

"""
aggregated selection of "explorePlotTime"
"""
type ExplorePlotTimeAggregate {
  aggregate: ExplorePlotTimeAggregateFields
  nodes: [ExplorePlotTime!]!
}

"""
aggregate fields of "explorePlotTime"
"""
type ExplorePlotTimeAggregateFields {
  count(columns: [ExplorePlotTimeSelectColumn!], distinct: Boolean): Int!
  max: ExplorePlotTimeMaxFields
  min: ExplorePlotTimeMinFields
}

"""
Boolean expression to filter rows from the table "explorePlotTime". All fields are combined with a logical 'AND'.
"""
input ExplorePlotTimeBoolExp {
  _and: [ExplorePlotTimeBoolExp!]
  _not: ExplorePlotTimeBoolExp
  _or: [ExplorePlotTimeBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "explorePlotTime"
"""
enum ExplorePlotTimeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  explorePlotTime_pkey
}

enum ExplorePlotTimeEnum {
  SIDEREAL
  SITE
  UT
}

"""
Boolean expression to compare columns of type "ExplorePlotTimeEnum". All fields are combined with logical 'AND'.
"""
input ExplorePlotTimeEnumComparisonExp {
  _eq: ExplorePlotTimeEnum
  _in: [ExplorePlotTimeEnum!]
  _isNull: Boolean
  _neq: ExplorePlotTimeEnum
  _nin: [ExplorePlotTimeEnum!]
}

"""
input type for inserting data into table "explorePlotTime"
"""
input ExplorePlotTimeInsertInput {
  id: String
}

"""aggregate max on columns"""
type ExplorePlotTimeMaxFields {
  id: String
}

"""aggregate min on columns"""
type ExplorePlotTimeMinFields {
  id: String
}

"""
response of any mutation on the table "explorePlotTime"
"""
type ExplorePlotTimeMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ExplorePlotTime!]!
}

"""
on_conflict condition type for table "explorePlotTime"
"""
input ExplorePlotTimeOnConflict {
  constraint: ExplorePlotTimeConstraint!
  update_columns: [ExplorePlotTimeUpdateColumn!]! = []
  where: ExplorePlotTimeBoolExp
}

"""Ordering options when selecting data from "explorePlotTime"."""
input ExplorePlotTimeOrderBy {
  id: OrderBy
}

"""primary key columns input for table: explorePlotTime"""
input ExplorePlotTimePkColumnsInput {
  id: String!
}

"""
select columns of table "explorePlotTime"
"""
enum ExplorePlotTimeSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "explorePlotTime"
"""
input ExplorePlotTimeSetInput {
  id: String
}

"""
update columns of table "explorePlotTime"
"""
enum ExplorePlotTimeUpdateColumn {
  """column name"""
  id
}

input ExplorePlotTimeUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: ExplorePlotTimeSetInput
  where: ExplorePlotTimeBoolExp!
}

"""
columns and relationships of "exploreTargetPreferences"
"""
type ExploreTargetPreferences {
  brightness: Int
  createdAt: timestamptz
  fovDec: bigint
  fovRA: bigint

  """An object relationship"""
  lucuma_target: LucumaTarget!
  saturation: Int
  targetId: String!
  updatedAt: timestamptz
  userId: String!
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
aggregated selection of "exploreTargetPreferences"
"""
type ExploreTargetPreferencesAggregate {
  aggregate: ExploreTargetPreferencesAggregateFields
  nodes: [ExploreTargetPreferences!]!
}

"""
aggregate fields of "exploreTargetPreferences"
"""
type ExploreTargetPreferencesAggregateFields {
  avg: ExploreTargetPreferencesAvgFields
  count(columns: [ExploreTargetPreferencesSelectColumn!], distinct: Boolean): Int!
  max: ExploreTargetPreferencesMaxFields
  min: ExploreTargetPreferencesMinFields
  stddev: ExploreTargetPreferencesStddevFields
  stddevPop: ExploreTargetPreferencesStddev_popFields
  stddevSamp: ExploreTargetPreferencesStddev_sampFields
  sum: ExploreTargetPreferencesSumFields
  varPop: ExploreTargetPreferencesVar_popFields
  varSamp: ExploreTargetPreferencesVar_sampFields
  variance: ExploreTargetPreferencesVarianceFields
}

"""
order by aggregate values of table "exploreTargetPreferences"
"""
input ExploreTargetPreferencesAggregateOrderBy {
  avg: exploreTargetPreferences_avg_order_by
  count: OrderBy
  max: exploreTargetPreferences_max_order_by
  min: exploreTargetPreferences_min_order_by
  stddev: exploreTargetPreferences_stddev_order_by
  stddev_pop: exploreTargetPreferences_stddev_pop_order_by
  stddev_samp: exploreTargetPreferences_stddev_samp_order_by
  sum: exploreTargetPreferences_sum_order_by
  var_pop: exploreTargetPreferences_var_pop_order_by
  var_samp: exploreTargetPreferences_var_samp_order_by
  variance: exploreTargetPreferences_variance_order_by
}

"""
input type for inserting array relation for remote table "exploreTargetPreferences"
"""
input ExploreTargetPreferencesArrRelInsertInput {
  data: [ExploreTargetPreferencesInsertInput!]!

  """upsert condition"""
  onConflict: ExploreTargetPreferencesOnConflict
}

"""aggregate avg on columns"""
type ExploreTargetPreferencesAvgFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
Boolean expression to filter rows from the table "exploreTargetPreferences". All fields are combined with a logical 'AND'.
"""
input ExploreTargetPreferencesBoolExp {
  _and: [ExploreTargetPreferencesBoolExp!]
  _not: ExploreTargetPreferencesBoolExp
  _or: [ExploreTargetPreferencesBoolExp!]
  brightness: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  fovDec: BigintComparisonExp
  fovRA: BigintComparisonExp
  lucuma_target: LucumaTargetBoolExp
  saturation: IntComparisonExp
  targetId: StringComparisonExp
  updatedAt: TimestamptzComparisonExp
  userId: StringComparisonExp
  viewOffsetP: BigintComparisonExp
  viewOffsetQ: BigintComparisonExp
}

"""
unique or primary key constraints on table "exploreTargetPreferences"
"""
enum ExploreTargetPreferencesConstraint {
  """
  unique or primary key constraint on columns "targetId", "userId"
  """
  lucuma_target_preferences_pkey
}

"""
input type for incrementing numeric columns in table "exploreTargetPreferences"
"""
input ExploreTargetPreferencesIncInput {
  brightness: Int
  fovDec: bigint
  fovRA: bigint
  saturation: Int
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
input type for inserting data into table "exploreTargetPreferences"
"""
input ExploreTargetPreferencesInsertInput {
  brightness: Int
  createdAt: timestamptz
  fovDec: bigint
  fovRA: bigint
  lucuma_target: LucumaTargetObjRelInsertInput
  saturation: Int
  targetId: String
  updatedAt: timestamptz
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate max on columns"""
type ExploreTargetPreferencesMaxFields {
  brightness: Int
  createdAt: timestamptz
  fovDec: bigint
  fovRA: bigint
  saturation: Int
  targetId: String
  updatedAt: timestamptz
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate min on columns"""
type ExploreTargetPreferencesMinFields {
  brightness: Int
  createdAt: timestamptz
  fovDec: bigint
  fovRA: bigint
  saturation: Int
  targetId: String
  updatedAt: timestamptz
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
response of any mutation on the table "exploreTargetPreferences"
"""
type ExploreTargetPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ExploreTargetPreferences!]!
}

"""
on_conflict condition type for table "exploreTargetPreferences"
"""
input ExploreTargetPreferencesOnConflict {
  constraint: ExploreTargetPreferencesConstraint!
  update_columns: [ExploreTargetPreferencesUpdateColumn!]! = []
  where: ExploreTargetPreferencesBoolExp
}

"""Ordering options when selecting data from "exploreTargetPreferences"."""
input ExploreTargetPreferencesOrderBy {
  brightness: OrderBy
  createdAt: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  lucuma_target: LucumaTargetOrderBy
  saturation: OrderBy
  targetId: OrderBy
  updatedAt: OrderBy
  userId: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""primary key columns input for table: exploreTargetPreferences"""
input ExploreTargetPreferencesPkColumnsInput {
  targetId: String!
  userId: String!
}

"""
select columns of table "exploreTargetPreferences"
"""
enum ExploreTargetPreferencesSelectColumn {
  """column name"""
  brightness

  """column name"""
  createdAt

  """column name"""
  fovDec

  """column name"""
  fovRA

  """column name"""
  saturation

  """column name"""
  targetId

  """column name"""
  updatedAt

  """column name"""
  userId

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

"""
input type for updating data in table "exploreTargetPreferences"
"""
input ExploreTargetPreferencesSetInput {
  brightness: Int
  createdAt: timestamptz
  fovDec: bigint
  fovRA: bigint
  saturation: Int
  targetId: String
  updatedAt: timestamptz
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate stddev on columns"""
type ExploreTargetPreferencesStddevFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate stddev_pop on columns"""
type ExploreTargetPreferencesStddev_popFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate stddev_samp on columns"""
type ExploreTargetPreferencesStddev_sampFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate sum on columns"""
type ExploreTargetPreferencesSumFields {
  brightness: Int
  fovDec: bigint
  fovRA: bigint
  saturation: Int
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
update columns of table "exploreTargetPreferences"
"""
enum ExploreTargetPreferencesUpdateColumn {
  """column name"""
  brightness

  """column name"""
  createdAt

  """column name"""
  fovDec

  """column name"""
  fovRA

  """column name"""
  saturation

  """column name"""
  targetId

  """column name"""
  updatedAt

  """column name"""
  userId

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

input ExploreTargetPreferencesUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ExploreTargetPreferencesIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ExploreTargetPreferencesSetInput
  where: ExploreTargetPreferencesBoolExp!
}

"""aggregate var_pop on columns"""
type ExploreTargetPreferencesVar_popFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate var_samp on columns"""
type ExploreTargetPreferencesVar_sampFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate variance on columns"""
type ExploreTargetPreferencesVarianceFields {
  brightness: Float
  fovDec: Float
  fovRA: Float
  saturation: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "lucumaGridBreakpointName"
"""
type LucumaGridBreakpointName {
  id: String!
}

"""
aggregated selection of "lucumaGridBreakpointName"
"""
type LucumaGridBreakpointNameAggregate {
  aggregate: LucumaGridBreakpointNameAggregateFields
  nodes: [LucumaGridBreakpointName!]!
}

"""
aggregate fields of "lucumaGridBreakpointName"
"""
type LucumaGridBreakpointNameAggregateFields {
  count(columns: [LucumaGridBreakpointNameSelectColumn!], distinct: Boolean): Int!
  max: LucumaGridBreakpointNameMaxFields
  min: LucumaGridBreakpointNameMinFields
}

"""
Boolean expression to filter rows from the table "lucumaGridBreakpointName". All fields are combined with a logical 'AND'.
"""
input LucumaGridBreakpointNameBoolExp {
  _and: [LucumaGridBreakpointNameBoolExp!]
  _not: LucumaGridBreakpointNameBoolExp
  _or: [LucumaGridBreakpointNameBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaGridBreakpointName"
"""
enum LucumaGridBreakpointNameConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  lucumaGridBreakpointName_pkey
}

enum LucumaGridBreakpointNameEnum {
  LG
  MD
  SM
  XL
  XS
  XSS
  XXL
}

"""
Boolean expression to compare columns of type "LucumaGridBreakpointNameEnum". All fields are combined with logical 'AND'.
"""
input LucumaGridBreakpointNameEnumComparisonExp {
  _eq: LucumaGridBreakpointNameEnum
  _in: [LucumaGridBreakpointNameEnum!]
  _isNull: Boolean
  _neq: LucumaGridBreakpointNameEnum
  _nin: [LucumaGridBreakpointNameEnum!]
}

"""
input type for inserting data into table "lucumaGridBreakpointName"
"""
input LucumaGridBreakpointNameInsertInput {
  id: String
}

"""aggregate max on columns"""
type LucumaGridBreakpointNameMaxFields {
  id: String
}

"""aggregate min on columns"""
type LucumaGridBreakpointNameMinFields {
  id: String
}

"""
response of any mutation on the table "lucumaGridBreakpointName"
"""
type LucumaGridBreakpointNameMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaGridBreakpointName!]!
}

"""
on_conflict condition type for table "lucumaGridBreakpointName"
"""
input LucumaGridBreakpointNameOnConflict {
  constraint: LucumaGridBreakpointNameConstraint!
  update_columns: [LucumaGridBreakpointNameUpdateColumn!]! = []
  where: LucumaGridBreakpointNameBoolExp
}

"""Ordering options when selecting data from "lucumaGridBreakpointName"."""
input LucumaGridBreakpointNameOrderBy {
  id: OrderBy
}

"""primary key columns input for table: lucumaGridBreakpointName"""
input LucumaGridBreakpointNamePkColumnsInput {
  id: String!
}

"""
select columns of table "lucumaGridBreakpointName"
"""
enum LucumaGridBreakpointNameSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "lucumaGridBreakpointName"
"""
input LucumaGridBreakpointNameSetInput {
  id: String
}

"""
update columns of table "lucumaGridBreakpointName"
"""
enum LucumaGridBreakpointNameUpdateColumn {
  """column name"""
  id
}

input LucumaGridBreakpointNameUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaGridBreakpointNameSetInput
  where: LucumaGridBreakpointNameBoolExp!
}

"""
columns and relationships of "lucumaGridLayoutId"
"""
type LucumaGridLayoutId {
  id: String!
}

"""
aggregated selection of "lucumaGridLayoutId"
"""
type LucumaGridLayoutIdAggregate {
  aggregate: LucumaGridLayoutIdAggregateFields
  nodes: [LucumaGridLayoutId!]!
}

"""
aggregate fields of "lucumaGridLayoutId"
"""
type LucumaGridLayoutIdAggregateFields {
  count(columns: [LucumaGridLayoutIdSelectColumn!], distinct: Boolean): Int!
  max: LucumaGridLayoutIdMaxFields
  min: LucumaGridLayoutIdMinFields
}

"""
Boolean expression to filter rows from the table "lucumaGridLayoutId". All fields are combined with a logical 'AND'.
"""
input LucumaGridLayoutIdBoolExp {
  _and: [LucumaGridLayoutIdBoolExp!]
  _not: LucumaGridLayoutIdBoolExp
  _or: [LucumaGridLayoutIdBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaGridLayoutId"
"""
enum LucumaGridLayoutIdConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  lucumaGridLayoutId_pkey
}

enum LucumaGridLayoutIdEnum {
  CONSTRAINTS
  OBSERVATIONS
  SCHEDULING
  TARGETS
}

"""
Boolean expression to compare columns of type "LucumaGridLayoutIdEnum". All fields are combined with logical 'AND'.
"""
input LucumaGridLayoutIdEnumComparisonExp {
  _eq: LucumaGridLayoutIdEnum
  _in: [LucumaGridLayoutIdEnum!]
  _isNull: Boolean
  _neq: LucumaGridLayoutIdEnum
  _nin: [LucumaGridLayoutIdEnum!]
}

"""
input type for inserting data into table "lucumaGridLayoutId"
"""
input LucumaGridLayoutIdInsertInput {
  id: String
}

"""aggregate max on columns"""
type LucumaGridLayoutIdMaxFields {
  id: String
}

"""aggregate min on columns"""
type LucumaGridLayoutIdMinFields {
  id: String
}

"""
response of any mutation on the table "lucumaGridLayoutId"
"""
type LucumaGridLayoutIdMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaGridLayoutId!]!
}

"""
on_conflict condition type for table "lucumaGridLayoutId"
"""
input LucumaGridLayoutIdOnConflict {
  constraint: LucumaGridLayoutIdConstraint!
  update_columns: [LucumaGridLayoutIdUpdateColumn!]! = []
  where: LucumaGridLayoutIdBoolExp
}

"""Ordering options when selecting data from "lucumaGridLayoutId"."""
input LucumaGridLayoutIdOrderBy {
  id: OrderBy
}

"""primary key columns input for table: lucumaGridLayoutId"""
input LucumaGridLayoutIdPkColumnsInput {
  id: String!
}

"""
select columns of table "lucumaGridLayoutId"
"""
enum LucumaGridLayoutIdSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "lucumaGridLayoutId"
"""
input LucumaGridLayoutIdSetInput {
  id: String
}

"""
update columns of table "lucumaGridLayoutId"
"""
enum LucumaGridLayoutIdUpdateColumn {
  """column name"""
  id
}

input LucumaGridLayoutIdUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaGridLayoutIdSetInput
  where: LucumaGridLayoutIdBoolExp!
}

"""
columns and relationships of "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositions {
  breakpointName: LucumaGridBreakpointNameEnum!
  height: Int!
  section: LucumaGridLayoutIdEnum!
  tile: String!
  userId: String!
  width: Int!
  x: Int!
  y: Int!
}

"""
aggregated selection of "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositionsAggregate {
  aggregate: LucumaGridLayoutPositionsAggregateFields
  nodes: [LucumaGridLayoutPositions!]!
}

"""
aggregate fields of "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositionsAggregateFields {
  avg: LucumaGridLayoutPositionsAvgFields
  count(columns: [LucumaGridLayoutPositionsSelectColumn!], distinct: Boolean): Int!
  max: LucumaGridLayoutPositionsMaxFields
  min: LucumaGridLayoutPositionsMinFields
  stddev: LucumaGridLayoutPositionsStddevFields
  stddevPop: LucumaGridLayoutPositionsStddev_popFields
  stddevSamp: LucumaGridLayoutPositionsStddev_sampFields
  sum: LucumaGridLayoutPositionsSumFields
  varPop: LucumaGridLayoutPositionsVar_popFields
  varSamp: LucumaGridLayoutPositionsVar_sampFields
  variance: LucumaGridLayoutPositionsVarianceFields
}

"""aggregate avg on columns"""
type LucumaGridLayoutPositionsAvgFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
Boolean expression to filter rows from the table "lucumaGridLayoutPositions". All fields are combined with a logical 'AND'.
"""
input LucumaGridLayoutPositionsBoolExp {
  _and: [LucumaGridLayoutPositionsBoolExp!]
  _not: LucumaGridLayoutPositionsBoolExp
  _or: [LucumaGridLayoutPositionsBoolExp!]
  breakpointName: LucumaGridBreakpointNameEnumComparisonExp
  height: IntComparisonExp
  section: LucumaGridLayoutIdEnumComparisonExp
  tile: StringComparisonExp
  userId: StringComparisonExp
  width: IntComparisonExp
  x: IntComparisonExp
  y: IntComparisonExp
}

"""
unique or primary key constraints on table "lucumaGridLayoutPositions"
"""
enum LucumaGridLayoutPositionsConstraint {
  """
  unique or primary key constraint on columns "section", "tile", "userId", "breakpointName"
  """
  grid_layout_positions_pkey
}

"""
input type for incrementing numeric columns in table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsIncInput {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
input type for inserting data into table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsInsertInput {
  breakpointName: LucumaGridBreakpointNameEnum
  height: Int
  section: LucumaGridLayoutIdEnum
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate max on columns"""
type LucumaGridLayoutPositionsMaxFields {
  height: Int
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate min on columns"""
type LucumaGridLayoutPositionsMinFields {
  height: Int
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""
response of any mutation on the table "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositionsMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaGridLayoutPositions!]!
}

"""
on_conflict condition type for table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsOnConflict {
  constraint: LucumaGridLayoutPositionsConstraint!
  update_columns: [LucumaGridLayoutPositionsUpdateColumn!]! = []
  where: LucumaGridLayoutPositionsBoolExp
}

"""Ordering options when selecting data from "lucumaGridLayoutPositions"."""
input LucumaGridLayoutPositionsOrderBy {
  breakpointName: OrderBy
  height: OrderBy
  section: OrderBy
  tile: OrderBy
  userId: OrderBy
  width: OrderBy
  x: OrderBy
  y: OrderBy
}

"""primary key columns input for table: lucumaGridLayoutPositions"""
input LucumaGridLayoutPositionsPkColumnsInput {
  breakpointName: LucumaGridBreakpointNameEnum!
  section: LucumaGridLayoutIdEnum!
  tile: String!
  userId: String!
}

"""
select columns of table "lucumaGridLayoutPositions"
"""
enum LucumaGridLayoutPositionsSelectColumn {
  """column name"""
  breakpointName

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  userId

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

"""
input type for updating data in table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsSetInput {
  breakpointName: LucumaGridBreakpointNameEnum
  height: Int
  section: LucumaGridLayoutIdEnum
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate stddev on columns"""
type LucumaGridLayoutPositionsStddevFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate stddev_pop on columns"""
type LucumaGridLayoutPositionsStddev_popFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate stddev_samp on columns"""
type LucumaGridLayoutPositionsStddev_sampFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate sum on columns"""
type LucumaGridLayoutPositionsSumFields {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
update columns of table "lucumaGridLayoutPositions"
"""
enum LucumaGridLayoutPositionsUpdateColumn {
  """column name"""
  breakpointName

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  userId

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

input LucumaGridLayoutPositionsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: LucumaGridLayoutPositionsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: LucumaGridLayoutPositionsSetInput
  where: LucumaGridLayoutPositionsBoolExp!
}

"""aggregate var_pop on columns"""
type LucumaGridLayoutPositionsVar_popFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate var_samp on columns"""
type LucumaGridLayoutPositionsVar_sampFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate variance on columns"""
type LucumaGridLayoutPositionsVarianceFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
columns and relationships of "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferences {
  chartType: ExploreChartTypeEnum!
  detailsOpen: Boolean!

  """An object relationship"""
  lucuma_observation: LucumaObservation!
  observationId: String!
  userId: String!
}

"""
aggregated selection of "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferencesAggregate {
  aggregate: LucumaItcPlotPreferencesAggregateFields
  nodes: [LucumaItcPlotPreferences!]!
}

"""
aggregate fields of "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferencesAggregateFields {
  count(columns: [LucumaItcPlotPreferencesSelectColumn!], distinct: Boolean): Int!
  max: LucumaItcPlotPreferencesMaxFields
  min: LucumaItcPlotPreferencesMinFields
}

"""
order by aggregate values of table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesAggregateOrderBy {
  count: OrderBy
  max: lucumaItcPlotPreferences_max_order_by
  min: lucumaItcPlotPreferences_min_order_by
}

"""
input type for inserting array relation for remote table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesArrRelInsertInput {
  data: [LucumaItcPlotPreferencesInsertInput!]!

  """upsert condition"""
  onConflict: LucumaItcPlotPreferencesOnConflict
}

"""
Boolean expression to filter rows from the table "lucumaItcPlotPreferences". All fields are combined with a logical 'AND'.
"""
input LucumaItcPlotPreferencesBoolExp {
  _and: [LucumaItcPlotPreferencesBoolExp!]
  _not: LucumaItcPlotPreferencesBoolExp
  _or: [LucumaItcPlotPreferencesBoolExp!]
  chartType: ExploreChartTypeEnumComparisonExp
  detailsOpen: BooleanComparisonExp
  lucuma_observation: LucumaObservationBoolExp
  observationId: StringComparisonExp
  userId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaItcPlotPreferences"
"""
enum LucumaItcPlotPreferencesConstraint {
  """
  unique or primary key constraint on columns "observationId", "userId"
  """
  lucuma_itc_plot_preferences_pkey
}

"""
input type for inserting data into table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesInsertInput {
  chartType: ExploreChartTypeEnum
  detailsOpen: Boolean
  lucuma_observation: LucumaObservationObjRelInsertInput
  observationId: String
  userId: String
}

"""aggregate max on columns"""
type LucumaItcPlotPreferencesMaxFields {
  observationId: String
  userId: String
}

"""aggregate min on columns"""
type LucumaItcPlotPreferencesMinFields {
  observationId: String
  userId: String
}

"""
response of any mutation on the table "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaItcPlotPreferences!]!
}

"""
on_conflict condition type for table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesOnConflict {
  constraint: LucumaItcPlotPreferencesConstraint!
  update_columns: [LucumaItcPlotPreferencesUpdateColumn!]! = []
  where: LucumaItcPlotPreferencesBoolExp
}

"""Ordering options when selecting data from "lucumaItcPlotPreferences"."""
input LucumaItcPlotPreferencesOrderBy {
  chartType: OrderBy
  detailsOpen: OrderBy
  lucuma_observation: LucumaObservationOrderBy
  observationId: OrderBy
  userId: OrderBy
}

"""primary key columns input for table: lucumaItcPlotPreferences"""
input LucumaItcPlotPreferencesPkColumnsInput {
  observationId: String!
  userId: String!
}

"""
select columns of table "lucumaItcPlotPreferences"
"""
enum LucumaItcPlotPreferencesSelectColumn {
  """column name"""
  chartType

  """column name"""
  detailsOpen

  """column name"""
  observationId

  """column name"""
  userId
}

"""
input type for updating data in table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesSetInput {
  chartType: ExploreChartTypeEnum
  detailsOpen: Boolean
  observationId: String
  userId: String
}

"""
update columns of table "lucumaItcPlotPreferences"
"""
enum LucumaItcPlotPreferencesUpdateColumn {
  """column name"""
  chartType

  """column name"""
  detailsOpen

  """column name"""
  observationId

  """column name"""
  userId
}

input LucumaItcPlotPreferencesUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaItcPlotPreferencesSetInput
  where: LucumaItcPlotPreferencesBoolExp!
}

"""
columns and relationships of "lucumaObservation"
"""
type LucumaObservation {
  """An array relationship"""
  exploreFinderCharts(
    """distinct select on columns"""
    distinctOn: [ExploreFinderChartSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreFinderChartOrderBy!]

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): [ExploreFinderChart!]!

  """An aggregate relationship"""
  exploreFinderChartsAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreFinderChartSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreFinderChartOrderBy!]

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): ExploreFinderChartAggregate!

  """An aggregate relationship"""
  lucumaItcPlotPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): LucumaItcPlotPreferencesAggregate!

  """An array relationship"""
  lucuma_itc_plot_preferences(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!
  observationId: String!
}

"""
aggregated selection of "lucumaObservation"
"""
type LucumaObservationAggregate {
  aggregate: LucumaObservationAggregateFields
  nodes: [LucumaObservation!]!
}

"""
aggregate fields of "lucumaObservation"
"""
type LucumaObservationAggregateFields {
  count(columns: [LucumaObservationSelectColumn!], distinct: Boolean): Int!
  max: LucumaObservationMaxFields
  min: LucumaObservationMinFields
}

"""
Boolean expression to filter rows from the table "lucumaObservation". All fields are combined with a logical 'AND'.
"""
input LucumaObservationBoolExp {
  _and: [LucumaObservationBoolExp!]
  _not: LucumaObservationBoolExp
  _or: [LucumaObservationBoolExp!]
  exploreFinderCharts: ExploreFinderChartBoolExp
  lucuma_itc_plot_preferences: LucumaItcPlotPreferencesBoolExp
  observationId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaObservation"
"""
enum LucumaObservationConstraint {
  """
  unique or primary key constraint on columns "observationId"
  """
  lucuma_observation_pkey
}

"""
input type for inserting data into table "lucumaObservation"
"""
input LucumaObservationInsertInput {
  exploreFinderCharts: ExploreFinderChartArrRelInsertInput
  lucuma_itc_plot_preferences: LucumaItcPlotPreferencesArrRelInsertInput
  observationId: String
}

"""aggregate max on columns"""
type LucumaObservationMaxFields {
  observationId: String
}

"""aggregate min on columns"""
type LucumaObservationMinFields {
  observationId: String
}

"""
response of any mutation on the table "lucumaObservation"
"""
type LucumaObservationMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaObservation!]!
}

"""
input type for inserting object relation for remote table "lucumaObservation"
"""
input LucumaObservationObjRelInsertInput {
  data: LucumaObservationInsertInput!

  """upsert condition"""
  onConflict: LucumaObservationOnConflict
}

"""
on_conflict condition type for table "lucumaObservation"
"""
input LucumaObservationOnConflict {
  constraint: LucumaObservationConstraint!
  update_columns: [LucumaObservationUpdateColumn!]! = []
  where: LucumaObservationBoolExp
}

"""Ordering options when selecting data from "lucumaObservation"."""
input LucumaObservationOrderBy {
  exploreFinderChartsAggregate: ExploreFinderChartAggregateOrderBy
  lucuma_itc_plot_preferencesAggregate: LucumaItcPlotPreferencesAggregateOrderBy
  observationId: OrderBy
}

"""primary key columns input for table: lucumaObservation"""
input LucumaObservationPkColumnsInput {
  observationId: String!
}

"""
select columns of table "lucumaObservation"
"""
enum LucumaObservationSelectColumn {
  """column name"""
  observationId
}

"""
input type for updating data in table "lucumaObservation"
"""
input LucumaObservationSetInput {
  observationId: String
}

"""
update columns of table "lucumaObservation"
"""
enum LucumaObservationUpdateColumn {
  """column name"""
  observationId
}

input LucumaObservationUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaObservationSetInput
  where: LucumaObservationBoolExp!
}

"""
columns and relationships of "lucumaSortDirection"
"""
type LucumaSortDirection {
  id: String!
}

"""
aggregated selection of "lucumaSortDirection"
"""
type LucumaSortDirectionAggregate {
  aggregate: LucumaSortDirectionAggregateFields
  nodes: [LucumaSortDirection!]!
}

"""
aggregate fields of "lucumaSortDirection"
"""
type LucumaSortDirectionAggregateFields {
  count(columns: [LucumaSortDirectionSelectColumn!], distinct: Boolean): Int!
  max: LucumaSortDirectionMaxFields
  min: LucumaSortDirectionMinFields
}

"""
Boolean expression to filter rows from the table "lucumaSortDirection". All fields are combined with a logical 'AND'.
"""
input LucumaSortDirectionBoolExp {
  _and: [LucumaSortDirectionBoolExp!]
  _not: LucumaSortDirectionBoolExp
  _or: [LucumaSortDirectionBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaSortDirection"
"""
enum LucumaSortDirectionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  lucumaSortDirection_pkey
}

enum LucumaSortDirectionEnum {
  ASC
  DESC
}

"""
Boolean expression to compare columns of type "LucumaSortDirectionEnum". All fields are combined with logical 'AND'.
"""
input LucumaSortDirectionEnumComparisonExp {
  _eq: LucumaSortDirectionEnum
  _in: [LucumaSortDirectionEnum!]
  _isNull: Boolean
  _neq: LucumaSortDirectionEnum
  _nin: [LucumaSortDirectionEnum!]
}

"""
input type for inserting data into table "lucumaSortDirection"
"""
input LucumaSortDirectionInsertInput {
  id: String
}

"""aggregate max on columns"""
type LucumaSortDirectionMaxFields {
  id: String
}

"""aggregate min on columns"""
type LucumaSortDirectionMinFields {
  id: String
}

"""
response of any mutation on the table "lucumaSortDirection"
"""
type LucumaSortDirectionMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaSortDirection!]!
}

"""
on_conflict condition type for table "lucumaSortDirection"
"""
input LucumaSortDirectionOnConflict {
  constraint: LucumaSortDirectionConstraint!
  update_columns: [LucumaSortDirectionUpdateColumn!]! = []
  where: LucumaSortDirectionBoolExp
}

"""Ordering options when selecting data from "lucumaSortDirection"."""
input LucumaSortDirectionOrderBy {
  id: OrderBy
}

"""primary key columns input for table: lucumaSortDirection"""
input LucumaSortDirectionPkColumnsInput {
  id: String!
}

"""
select columns of table "lucumaSortDirection"
"""
enum LucumaSortDirectionSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "lucumaSortDirection"
"""
input LucumaSortDirectionSetInput {
  id: String
}

"""
update columns of table "lucumaSortDirection"
"""
enum LucumaSortDirectionUpdateColumn {
  """column name"""
  id
}

input LucumaSortDirectionUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaSortDirectionSetInput
  where: LucumaSortDirectionBoolExp!
}

"""
columns and relationships of "lucumaTableColumnPreferences"
"""
type LucumaTableColumnPreferences {
  columnId: String!
  createdAt: timestamptz
  sorting: LucumaSortDirectionEnum
  sortingOrder: Int
  tableId: LucumaTableIdsEnum!
  updatedAt: timestamptz
  userId: String!
  visible: Boolean!
}

"""
aggregated selection of "lucumaTableColumnPreferences"
"""
type LucumaTableColumnPreferencesAggregate {
  aggregate: LucumaTableColumnPreferencesAggregateFields
  nodes: [LucumaTableColumnPreferences!]!
}

"""
aggregate fields of "lucumaTableColumnPreferences"
"""
type LucumaTableColumnPreferencesAggregateFields {
  avg: LucumaTableColumnPreferencesAvgFields
  count(columns: [LucumaTableColumnPreferencesSelectColumn!], distinct: Boolean): Int!
  max: LucumaTableColumnPreferencesMaxFields
  min: LucumaTableColumnPreferencesMinFields
  stddev: LucumaTableColumnPreferencesStddevFields
  stddevPop: LucumaTableColumnPreferencesStddev_popFields
  stddevSamp: LucumaTableColumnPreferencesStddev_sampFields
  sum: LucumaTableColumnPreferencesSumFields
  varPop: LucumaTableColumnPreferencesVar_popFields
  varSamp: LucumaTableColumnPreferencesVar_sampFields
  variance: LucumaTableColumnPreferencesVarianceFields
}

"""aggregate avg on columns"""
type LucumaTableColumnPreferencesAvgFields {
  sortingOrder: Float
}

"""
Boolean expression to filter rows from the table "lucumaTableColumnPreferences". All fields are combined with a logical 'AND'.
"""
input LucumaTableColumnPreferencesBoolExp {
  _and: [LucumaTableColumnPreferencesBoolExp!]
  _not: LucumaTableColumnPreferencesBoolExp
  _or: [LucumaTableColumnPreferencesBoolExp!]
  columnId: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  sorting: LucumaSortDirectionEnumComparisonExp
  sortingOrder: IntComparisonExp
  tableId: LucumaTableIdsEnumComparisonExp
  updatedAt: TimestamptzComparisonExp
  userId: StringComparisonExp
  visible: BooleanComparisonExp
}

"""
unique or primary key constraints on table "lucumaTableColumnPreferences"
"""
enum LucumaTableColumnPreferencesConstraint {
  """
  unique or primary key constraint on columns "tableId", "userId", "columnId"
  """
  lucumaTableColumnPreferences_pkey
}

"""
input type for incrementing numeric columns in table "lucumaTableColumnPreferences"
"""
input LucumaTableColumnPreferencesIncInput {
  sortingOrder: Int
}

"""
input type for inserting data into table "lucumaTableColumnPreferences"
"""
input LucumaTableColumnPreferencesInsertInput {
  columnId: String
  createdAt: timestamptz
  sorting: LucumaSortDirectionEnum
  sortingOrder: Int
  tableId: LucumaTableIdsEnum
  updatedAt: timestamptz
  userId: String
  visible: Boolean
}

"""aggregate max on columns"""
type LucumaTableColumnPreferencesMaxFields {
  columnId: String
  createdAt: timestamptz
  sortingOrder: Int
  updatedAt: timestamptz
  userId: String
}

"""aggregate min on columns"""
type LucumaTableColumnPreferencesMinFields {
  columnId: String
  createdAt: timestamptz
  sortingOrder: Int
  updatedAt: timestamptz
  userId: String
}

"""
response of any mutation on the table "lucumaTableColumnPreferences"
"""
type LucumaTableColumnPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaTableColumnPreferences!]!
}

"""
on_conflict condition type for table "lucumaTableColumnPreferences"
"""
input LucumaTableColumnPreferencesOnConflict {
  constraint: LucumaTableColumnPreferencesConstraint!
  update_columns: [LucumaTableColumnPreferencesUpdateColumn!]! = []
  where: LucumaTableColumnPreferencesBoolExp
}

"""
Ordering options when selecting data from "lucumaTableColumnPreferences".
"""
input LucumaTableColumnPreferencesOrderBy {
  columnId: OrderBy
  createdAt: OrderBy
  sorting: OrderBy
  sortingOrder: OrderBy
  tableId: OrderBy
  updatedAt: OrderBy
  userId: OrderBy
  visible: OrderBy
}

"""primary key columns input for table: lucumaTableColumnPreferences"""
input LucumaTableColumnPreferencesPkColumnsInput {
  columnId: String!
  tableId: LucumaTableIdsEnum!
  userId: String!
}

"""
select columns of table "lucumaTableColumnPreferences"
"""
enum LucumaTableColumnPreferencesSelectColumn {
  """column name"""
  columnId

  """column name"""
  createdAt

  """column name"""
  sorting

  """column name"""
  sortingOrder

  """column name"""
  tableId

  """column name"""
  updatedAt

  """column name"""
  userId

  """column name"""
  visible
}

"""
input type for updating data in table "lucumaTableColumnPreferences"
"""
input LucumaTableColumnPreferencesSetInput {
  columnId: String
  createdAt: timestamptz
  sorting: LucumaSortDirectionEnum
  sortingOrder: Int
  tableId: LucumaTableIdsEnum
  updatedAt: timestamptz
  userId: String
  visible: Boolean
}

"""aggregate stddev on columns"""
type LucumaTableColumnPreferencesStddevFields {
  sortingOrder: Float
}

"""aggregate stddev_pop on columns"""
type LucumaTableColumnPreferencesStddev_popFields {
  sortingOrder: Float
}

"""aggregate stddev_samp on columns"""
type LucumaTableColumnPreferencesStddev_sampFields {
  sortingOrder: Float
}

"""aggregate sum on columns"""
type LucumaTableColumnPreferencesSumFields {
  sortingOrder: Int
}

"""
update columns of table "lucumaTableColumnPreferences"
"""
enum LucumaTableColumnPreferencesUpdateColumn {
  """column name"""
  columnId

  """column name"""
  createdAt

  """column name"""
  sorting

  """column name"""
  sortingOrder

  """column name"""
  tableId

  """column name"""
  updatedAt

  """column name"""
  userId

  """column name"""
  visible
}

input LucumaTableColumnPreferencesUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: LucumaTableColumnPreferencesIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: LucumaTableColumnPreferencesSetInput
  where: LucumaTableColumnPreferencesBoolExp!
}

"""aggregate var_pop on columns"""
type LucumaTableColumnPreferencesVar_popFields {
  sortingOrder: Float
}

"""aggregate var_samp on columns"""
type LucumaTableColumnPreferencesVar_sampFields {
  sortingOrder: Float
}

"""aggregate variance on columns"""
type LucumaTableColumnPreferencesVarianceFields {
  sortingOrder: Float
}

"""
columns and relationships of "lucumaTableIds"
"""
type LucumaTableIds {
  id: String!
}

"""
aggregated selection of "lucumaTableIds"
"""
type LucumaTableIdsAggregate {
  aggregate: LucumaTableIdsAggregateFields
  nodes: [LucumaTableIds!]!
}

"""
aggregate fields of "lucumaTableIds"
"""
type LucumaTableIdsAggregateFields {
  count(columns: [LucumaTableIdsSelectColumn!], distinct: Boolean): Int!
  max: LucumaTableIdsMaxFields
  min: LucumaTableIdsMinFields
}

"""
Boolean expression to filter rows from the table "lucumaTableIds". All fields are combined with a logical 'AND'.
"""
input LucumaTableIdsBoolExp {
  _and: [LucumaTableIdsBoolExp!]
  _not: LucumaTableIdsBoolExp
  _or: [LucumaTableIdsBoolExp!]
  id: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaTableIds"
"""
enum LucumaTableIdsConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  lucumaTargetIds_pkey
}

enum LucumaTableIdsEnum {
  ASTERISM_TARGETS
  CONSTRAINTS_SUMMARY
  OBSERVATIONS_SUMMARY
  SPECTROSCOPY_MODES
  TARGETS_SUMMARY
}

"""
Boolean expression to compare columns of type "LucumaTableIdsEnum". All fields are combined with logical 'AND'.
"""
input LucumaTableIdsEnumComparisonExp {
  _eq: LucumaTableIdsEnum
  _in: [LucumaTableIdsEnum!]
  _isNull: Boolean
  _neq: LucumaTableIdsEnum
  _nin: [LucumaTableIdsEnum!]
}

"""
input type for inserting data into table "lucumaTableIds"
"""
input LucumaTableIdsInsertInput {
  id: String
}

"""aggregate max on columns"""
type LucumaTableIdsMaxFields {
  id: String
}

"""aggregate min on columns"""
type LucumaTableIdsMinFields {
  id: String
}

"""
response of any mutation on the table "lucumaTableIds"
"""
type LucumaTableIdsMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaTableIds!]!
}

"""
on_conflict condition type for table "lucumaTableIds"
"""
input LucumaTableIdsOnConflict {
  constraint: LucumaTableIdsConstraint!
  update_columns: [LucumaTableIdsUpdateColumn!]! = []
  where: LucumaTableIdsBoolExp
}

"""Ordering options when selecting data from "lucumaTableIds"."""
input LucumaTableIdsOrderBy {
  id: OrderBy
}

"""primary key columns input for table: lucumaTableIds"""
input LucumaTableIdsPkColumnsInput {
  id: String!
}

"""
select columns of table "lucumaTableIds"
"""
enum LucumaTableIdsSelectColumn {
  """column name"""
  id
}

"""
input type for updating data in table "lucumaTableIds"
"""
input LucumaTableIdsSetInput {
  id: String
}

"""
update columns of table "lucumaTableIds"
"""
enum LucumaTableIdsUpdateColumn {
  """column name"""
  id
}

input LucumaTableIdsUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaTableIdsSetInput
  where: LucumaTableIdsBoolExp!
}

"""
columns and relationships of "lucumaTarget"
"""
type LucumaTarget {
  """An aggregate relationship"""
  lucumaTargetPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): ExploreTargetPreferencesAggregate!

  """An array relationship"""
  lucuma_target_preferences(
    """distinct select on columns"""
    distinctOn: [ExploreTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): [ExploreTargetPreferences!]!
  targetId: String!
}

"""
aggregated selection of "lucumaTarget"
"""
type LucumaTargetAggregate {
  aggregate: LucumaTargetAggregateFields
  nodes: [LucumaTarget!]!
}

"""
aggregate fields of "lucumaTarget"
"""
type LucumaTargetAggregateFields {
  count(columns: [LucumaTargetSelectColumn!], distinct: Boolean): Int!
  max: LucumaTargetMaxFields
  min: LucumaTargetMinFields
}

"""
Boolean expression to filter rows from the table "lucumaTarget". All fields are combined with a logical 'AND'.
"""
input LucumaTargetBoolExp {
  _and: [LucumaTargetBoolExp!]
  _not: LucumaTargetBoolExp
  _or: [LucumaTargetBoolExp!]
  lucuma_target_preferences: ExploreTargetPreferencesBoolExp
  targetId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaTarget"
"""
enum LucumaTargetConstraint {
  """
  unique or primary key constraint on columns "targetId"
  """
  lucuma_target_pkey
}

"""
input type for inserting data into table "lucumaTarget"
"""
input LucumaTargetInsertInput {
  lucuma_target_preferences: ExploreTargetPreferencesArrRelInsertInput
  targetId: String
}

"""aggregate max on columns"""
type LucumaTargetMaxFields {
  targetId: String
}

"""aggregate min on columns"""
type LucumaTargetMinFields {
  targetId: String
}

"""
response of any mutation on the table "lucumaTarget"
"""
type LucumaTargetMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaTarget!]!
}

"""
input type for inserting object relation for remote table "lucumaTarget"
"""
input LucumaTargetObjRelInsertInput {
  data: LucumaTargetInsertInput!

  """upsert condition"""
  onConflict: LucumaTargetOnConflict
}

"""
on_conflict condition type for table "lucumaTarget"
"""
input LucumaTargetOnConflict {
  constraint: LucumaTargetConstraint!
  update_columns: [LucumaTargetUpdateColumn!]! = []
  where: LucumaTargetBoolExp
}

"""Ordering options when selecting data from "lucumaTarget"."""
input LucumaTargetOrderBy {
  lucuma_target_preferencesAggregate: ExploreTargetPreferencesAggregateOrderBy
  targetId: OrderBy
}

"""primary key columns input for table: lucumaTarget"""
input LucumaTargetPkColumnsInput {
  targetId: String!
}

"""
select columns of table "lucumaTarget"
"""
enum LucumaTargetSelectColumn {
  """column name"""
  targetId
}

"""
input type for updating data in table "lucumaTarget"
"""
input LucumaTargetSetInput {
  targetId: String
}

"""
update columns of table "lucumaTarget"
"""
enum LucumaTargetUpdateColumn {
  """column name"""
  targetId
}

input LucumaTargetUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaTargetSetInput
  where: LucumaTargetBoolExp!
}

"""
columns and relationships of "lucumaUser"
"""
type LucumaUser {
  userId: String!
}

"""
aggregated selection of "lucumaUser"
"""
type LucumaUserAggregate {
  aggregate: LucumaUserAggregateFields
  nodes: [LucumaUser!]!
}

"""
aggregate fields of "lucumaUser"
"""
type LucumaUserAggregateFields {
  count(columns: [LucumaUserSelectColumn!], distinct: Boolean): Int!
  max: LucumaUserMaxFields
  min: LucumaUserMinFields
}

"""
Boolean expression to filter rows from the table "lucumaUser". All fields are combined with a logical 'AND'.
"""
input LucumaUserBoolExp {
  _and: [LucumaUserBoolExp!]
  _not: LucumaUserBoolExp
  _or: [LucumaUserBoolExp!]
  userId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaUser"
"""
enum LucumaUserConstraint {
  """
  unique or primary key constraint on columns "userId"
  """
  lucuma_user_pkey
}

"""
input type for inserting data into table "lucumaUser"
"""
input LucumaUserInsertInput {
  userId: String
}

"""aggregate max on columns"""
type LucumaUserMaxFields {
  userId: String
}

"""aggregate min on columns"""
type LucumaUserMinFields {
  userId: String
}

"""
response of any mutation on the table "lucumaUser"
"""
type LucumaUserMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaUser!]!
}

"""
input type for inserting object relation for remote table "lucumaUser"
"""
input LucumaUserObjRelInsertInput {
  data: LucumaUserInsertInput!

  """upsert condition"""
  onConflict: LucumaUserOnConflict
}

"""
on_conflict condition type for table "lucumaUser"
"""
input LucumaUserOnConflict {
  constraint: LucumaUserConstraint!
  update_columns: [LucumaUserUpdateColumn!]! = []
  where: LucumaUserBoolExp
}

"""Ordering options when selecting data from "lucumaUser"."""
input LucumaUserOrderBy {
  userId: OrderBy
}

"""primary key columns input for table: lucumaUser"""
input LucumaUserPkColumnsInput {
  userId: String!
}

"""
columns and relationships of "lucumaUserPreferences"
"""
type LucumaUserPreferences {
  acquisitionOffsets: Boolean
  agsOverlay: Boolean
  aladinMouseScroll: Boolean
  createdAt: timestamptz
  elevationPlotRange: ExplorePlotRangeEnum
  elevationPlotTime: ExplorePlotTimeEnum
  fullScreen: Boolean

  """An object relationship"""
  lucuma_user: LucumaUser!
  scienceOffsets: Boolean
  showCatalog: Boolean
  updatedAt: timestamptz
  userId: String!
}

"""
aggregated selection of "lucumaUserPreferences"
"""
type LucumaUserPreferencesAggregate {
  aggregate: LucumaUserPreferencesAggregateFields
  nodes: [LucumaUserPreferences!]!
}

"""
aggregate fields of "lucumaUserPreferences"
"""
type LucumaUserPreferencesAggregateFields {
  count(columns: [LucumaUserPreferencesSelectColumn!], distinct: Boolean): Int!
  max: LucumaUserPreferencesMaxFields
  min: LucumaUserPreferencesMinFields
}

"""
Boolean expression to filter rows from the table "lucumaUserPreferences". All fields are combined with a logical 'AND'.
"""
input LucumaUserPreferencesBoolExp {
  _and: [LucumaUserPreferencesBoolExp!]
  _not: LucumaUserPreferencesBoolExp
  _or: [LucumaUserPreferencesBoolExp!]
  acquisitionOffsets: BooleanComparisonExp
  agsOverlay: BooleanComparisonExp
  aladinMouseScroll: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  elevationPlotRange: ExplorePlotRangeEnumComparisonExp
  elevationPlotTime: ExplorePlotTimeEnumComparisonExp
  fullScreen: BooleanComparisonExp
  lucuma_user: LucumaUserBoolExp
  scienceOffsets: BooleanComparisonExp
  showCatalog: BooleanComparisonExp
  updatedAt: TimestamptzComparisonExp
  userId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaUserPreferences"
"""
enum LucumaUserPreferencesConstraint {
  """
  unique or primary key constraint on columns "userId"
  """
  lucuma_user_preferences_pkey
}

"""
input type for inserting data into table "lucumaUserPreferences"
"""
input LucumaUserPreferencesInsertInput {
  acquisitionOffsets: Boolean
  agsOverlay: Boolean
  aladinMouseScroll: Boolean
  createdAt: timestamptz
  elevationPlotRange: ExplorePlotRangeEnum
  elevationPlotTime: ExplorePlotTimeEnum
  fullScreen: Boolean
  lucuma_user: LucumaUserObjRelInsertInput
  scienceOffsets: Boolean
  showCatalog: Boolean
  updatedAt: timestamptz
  userId: String
}

"""aggregate max on columns"""
type LucumaUserPreferencesMaxFields {
  createdAt: timestamptz
  updatedAt: timestamptz
  userId: String
}

"""aggregate min on columns"""
type LucumaUserPreferencesMinFields {
  createdAt: timestamptz
  updatedAt: timestamptz
  userId: String
}

"""
response of any mutation on the table "lucumaUserPreferences"
"""
type LucumaUserPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaUserPreferences!]!
}

"""
on_conflict condition type for table "lucumaUserPreferences"
"""
input LucumaUserPreferencesOnConflict {
  constraint: LucumaUserPreferencesConstraint!
  update_columns: [LucumaUserPreferencesUpdateColumn!]! = []
  where: LucumaUserPreferencesBoolExp
}

"""Ordering options when selecting data from "lucumaUserPreferences"."""
input LucumaUserPreferencesOrderBy {
  acquisitionOffsets: OrderBy
  agsOverlay: OrderBy
  aladinMouseScroll: OrderBy
  createdAt: OrderBy
  elevationPlotRange: OrderBy
  elevationPlotTime: OrderBy
  fullScreen: OrderBy
  lucuma_user: LucumaUserOrderBy
  scienceOffsets: OrderBy
  showCatalog: OrderBy
  updatedAt: OrderBy
  userId: OrderBy
}

"""primary key columns input for table: lucumaUserPreferences"""
input LucumaUserPreferencesPkColumnsInput {
  userId: String!
}

"""
select columns of table "lucumaUserPreferences"
"""
enum LucumaUserPreferencesSelectColumn {
  """column name"""
  acquisitionOffsets

  """column name"""
  agsOverlay

  """column name"""
  aladinMouseScroll

  """column name"""
  createdAt

  """column name"""
  elevationPlotRange

  """column name"""
  elevationPlotTime

  """column name"""
  fullScreen

  """column name"""
  scienceOffsets

  """column name"""
  showCatalog

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
input type for updating data in table "lucumaUserPreferences"
"""
input LucumaUserPreferencesSetInput {
  acquisitionOffsets: Boolean
  agsOverlay: Boolean
  aladinMouseScroll: Boolean
  createdAt: timestamptz
  elevationPlotRange: ExplorePlotRangeEnum
  elevationPlotTime: ExplorePlotTimeEnum
  fullScreen: Boolean
  scienceOffsets: Boolean
  showCatalog: Boolean
  updatedAt: timestamptz
  userId: String
}

"""
update columns of table "lucumaUserPreferences"
"""
enum LucumaUserPreferencesUpdateColumn {
  """column name"""
  acquisitionOffsets

  """column name"""
  agsOverlay

  """column name"""
  aladinMouseScroll

  """column name"""
  createdAt

  """column name"""
  elevationPlotRange

  """column name"""
  elevationPlotTime

  """column name"""
  fullScreen

  """column name"""
  scienceOffsets

  """column name"""
  showCatalog

  """column name"""
  updatedAt

  """column name"""
  userId
}

input LucumaUserPreferencesUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaUserPreferencesSetInput
  where: LucumaUserPreferencesBoolExp!
}

"""
select columns of table "lucumaUser"
"""
enum LucumaUserSelectColumn {
  """column name"""
  userId
}

"""
input type for updating data in table "lucumaUser"
"""
input LucumaUserSetInput {
  userId: String
}

"""
update columns of table "lucumaUser"
"""
enum LucumaUserUpdateColumn {
  """column name"""
  userId
}

input LucumaUserUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaUserSetInput
  where: LucumaUserBoolExp!
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar bigint

"""
Streaming cursor of the table "exploreChartType"
"""
input exploreChartType_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: exploreChartType_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input exploreChartType_streamCursorValueInput {
  id: String
}

"""
order by avg() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_avg_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by max() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_max_order_by {
  attachmentId: OrderBy
  observationId: OrderBy
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by min() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_min_order_by {
  attachmentId: OrderBy
  observationId: OrderBy
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by stddev() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_stddev_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by stddev_pop() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_stddev_pop_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by stddev_samp() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_stddev_samp_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
Streaming cursor of the table "exploreFinderChart"
"""
input exploreFinderChart_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: exploreFinderChart_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input exploreFinderChart_streamCursorValueInput {
  attachmentId: String
  flipX: Boolean
  flipY: Boolean
  inverted: Boolean
  observationId: String
  rotate: Int
  scaleX: Int
  scaleY: Int
}

"""
order by sum() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_sum_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by var_pop() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_var_pop_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by var_samp() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_var_samp_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
order by variance() on columns of table "exploreFinderChart"
"""
input exploreFinderChart_variance_order_by {
  rotate: OrderBy
  scaleX: OrderBy
  scaleY: OrderBy
}

"""
Streaming cursor of the table "explorePlotRange"
"""
input explorePlotRange_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: explorePlotRange_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input explorePlotRange_streamCursorValueInput {
  id: String
}

"""
Streaming cursor of the table "explorePlotTime"
"""
input explorePlotTime_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: explorePlotTime_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input explorePlotTime_streamCursorValueInput {
  id: String
}

"""
order by avg() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_avg_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by max() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_max_order_by {
  brightness: OrderBy
  createdAt: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  targetId: OrderBy
  updatedAt: OrderBy
  userId: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by min() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_min_order_by {
  brightness: OrderBy
  createdAt: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  targetId: OrderBy
  updatedAt: OrderBy
  userId: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by stddev() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_stddev_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by stddev_pop() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_stddev_pop_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by stddev_samp() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_stddev_samp_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
Streaming cursor of the table "exploreTargetPreferences"
"""
input exploreTargetPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: exploreTargetPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input exploreTargetPreferences_streamCursorValueInput {
  brightness: Int
  createdAt: timestamptz
  fovDec: bigint
  fovRA: bigint
  saturation: Int
  targetId: String
  updatedAt: timestamptz
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by sum() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_sum_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by var_pop() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_var_pop_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by var_samp() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_var_samp_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by variance() on columns of table "exploreTargetPreferences"
"""
input exploreTargetPreferences_variance_order_by {
  brightness: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  saturation: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
Streaming cursor of the table "lucumaGridBreakpointName"
"""
input lucumaGridBreakpointName_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaGridBreakpointName_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaGridBreakpointName_streamCursorValueInput {
  id: String
}

"""
Streaming cursor of the table "lucumaGridLayoutId"
"""
input lucumaGridLayoutId_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaGridLayoutId_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaGridLayoutId_streamCursorValueInput {
  id: String
}

"""
Streaming cursor of the table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaGridLayoutPositions_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaGridLayoutPositions_streamCursorValueInput {
  breakpointName: LucumaGridBreakpointNameEnum
  height: Int
  section: LucumaGridLayoutIdEnum
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""
order by max() on columns of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_max_order_by {
  observationId: OrderBy
  userId: OrderBy
}

"""
order by min() on columns of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_min_order_by {
  observationId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaItcPlotPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaItcPlotPreferences_streamCursorValueInput {
  chartType: ExploreChartTypeEnum
  detailsOpen: Boolean
  observationId: String
  userId: String
}

"""
Streaming cursor of the table "lucumaObservation"
"""
input lucumaObservation_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaObservation_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaObservation_streamCursorValueInput {
  observationId: String
}

"""
Streaming cursor of the table "lucumaSortDirection"
"""
input lucumaSortDirection_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaSortDirection_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaSortDirection_streamCursorValueInput {
  id: String
}

"""
Streaming cursor of the table "lucumaTableColumnPreferences"
"""
input lucumaTableColumnPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaTableColumnPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTableColumnPreferences_streamCursorValueInput {
  columnId: String
  createdAt: timestamptz
  sorting: LucumaSortDirectionEnum
  sortingOrder: Int
  tableId: LucumaTableIdsEnum
  updatedAt: timestamptz
  userId: String
  visible: Boolean
}

"""
Streaming cursor of the table "lucumaTableIds"
"""
input lucumaTableIds_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaTableIds_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTableIds_streamCursorValueInput {
  id: String
}

"""
Streaming cursor of the table "lucumaTarget"
"""
input lucumaTarget_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaTarget_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTarget_streamCursorValueInput {
  targetId: String
}

"""
Streaming cursor of the table "lucumaUserPreferences"
"""
input lucumaUserPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaUserPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaUserPreferences_streamCursorValueInput {
  acquisitionOffsets: Boolean
  agsOverlay: Boolean
  aladinMouseScroll: Boolean
  createdAt: timestamptz
  elevationPlotRange: ExplorePlotRangeEnum
  elevationPlotTime: ExplorePlotTimeEnum
  fullScreen: Boolean
  scienceOffsets: Boolean
  showCatalog: Boolean
  updatedAt: timestamptz
  userId: String
}

"""
Streaming cursor of the table "lucumaUser"
"""
input lucumaUser_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaUser_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaUser_streamCursorValueInput {
  userId: String
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "exploreChartType"
  """
  deleteExploreChartType(
    """filter the rows which have to be deleted"""
    where: ExploreChartTypeBoolExp!
  ): ExploreChartTypeMutationResponse

  """
  delete single row from the table: "exploreChartType"
  """
  deleteExploreChartTypeByPk(id: String!): ExploreChartType

  """
  delete data from the table: "exploreFinderChart"
  """
  deleteExploreFinderChart(
    """filter the rows which have to be deleted"""
    where: ExploreFinderChartBoolExp!
  ): ExploreFinderChartMutationResponse

  """
  delete single row from the table: "exploreFinderChart"
  """
  deleteExploreFinderChartByPk(attachmentId: String!, observationId: String!): ExploreFinderChart

  """
  delete data from the table: "explorePlotRange"
  """
  deleteExplorePlotRange(
    """filter the rows which have to be deleted"""
    where: ExplorePlotRangeBoolExp!
  ): ExplorePlotRangeMutationResponse

  """
  delete single row from the table: "explorePlotRange"
  """
  deleteExplorePlotRangeByPk(id: String!): ExplorePlotRange

  """
  delete data from the table: "explorePlotTime"
  """
  deleteExplorePlotTime(
    """filter the rows which have to be deleted"""
    where: ExplorePlotTimeBoolExp!
  ): ExplorePlotTimeMutationResponse

  """
  delete single row from the table: "explorePlotTime"
  """
  deleteExplorePlotTimeByPk(id: String!): ExplorePlotTime

  """
  delete data from the table: "exploreTargetPreferences"
  """
  deleteExploreTargetPreferences(
    """filter the rows which have to be deleted"""
    where: ExploreTargetPreferencesBoolExp!
  ): ExploreTargetPreferencesMutationResponse

  """
  delete single row from the table: "exploreTargetPreferences"
  """
  deleteExploreTargetPreferencesByPk(targetId: String!, userId: String!): ExploreTargetPreferences

  """
  delete data from the table: "lucumaGridBreakpointName"
  """
  deleteLucumaGridBreakpointName(
    """filter the rows which have to be deleted"""
    where: LucumaGridBreakpointNameBoolExp!
  ): LucumaGridBreakpointNameMutationResponse

  """
  delete single row from the table: "lucumaGridBreakpointName"
  """
  deleteLucumaGridBreakpointNameByPk(id: String!): LucumaGridBreakpointName

  """
  delete data from the table: "lucumaGridLayoutId"
  """
  deleteLucumaGridLayoutId(
    """filter the rows which have to be deleted"""
    where: LucumaGridLayoutIdBoolExp!
  ): LucumaGridLayoutIdMutationResponse

  """
  delete single row from the table: "lucumaGridLayoutId"
  """
  deleteLucumaGridLayoutIdByPk(id: String!): LucumaGridLayoutId

  """
  delete data from the table: "lucumaGridLayoutPositions"
  """
  deleteLucumaGridLayoutPositions(
    """filter the rows which have to be deleted"""
    where: LucumaGridLayoutPositionsBoolExp!
  ): LucumaGridLayoutPositionsMutationResponse

  """
  delete single row from the table: "lucumaGridLayoutPositions"
  """
  deleteLucumaGridLayoutPositionsByPk(breakpointName: LucumaGridBreakpointNameEnum!, section: LucumaGridLayoutIdEnum!, tile: String!, userId: String!): LucumaGridLayoutPositions

  """
  delete data from the table: "lucumaItcPlotPreferences"
  """
  deleteLucumaItcPlotPreferences(
    """filter the rows which have to be deleted"""
    where: LucumaItcPlotPreferencesBoolExp!
  ): LucumaItcPlotPreferencesMutationResponse

  """
  delete single row from the table: "lucumaItcPlotPreferences"
  """
  deleteLucumaItcPlotPreferencesByPk(observationId: String!, userId: String!): LucumaItcPlotPreferences

  """
  delete data from the table: "lucumaObservation"
  """
  deleteLucumaObservation(
    """filter the rows which have to be deleted"""
    where: LucumaObservationBoolExp!
  ): LucumaObservationMutationResponse

  """
  delete single row from the table: "lucumaObservation"
  """
  deleteLucumaObservationByPk(observationId: String!): LucumaObservation

  """
  delete data from the table: "lucumaSortDirection"
  """
  deleteLucumaSortDirection(
    """filter the rows which have to be deleted"""
    where: LucumaSortDirectionBoolExp!
  ): LucumaSortDirectionMutationResponse

  """
  delete single row from the table: "lucumaSortDirection"
  """
  deleteLucumaSortDirectionByPk(id: String!): LucumaSortDirection

  """
  delete data from the table: "lucumaTableColumnPreferences"
  """
  deleteLucumaTableColumnPreferences(
    """filter the rows which have to be deleted"""
    where: LucumaTableColumnPreferencesBoolExp!
  ): LucumaTableColumnPreferencesMutationResponse

  """
  delete single row from the table: "lucumaTableColumnPreferences"
  """
  deleteLucumaTableColumnPreferencesByPk(columnId: String!, tableId: LucumaTableIdsEnum!, userId: String!): LucumaTableColumnPreferences

  """
  delete data from the table: "lucumaTableIds"
  """
  deleteLucumaTableIds(
    """filter the rows which have to be deleted"""
    where: LucumaTableIdsBoolExp!
  ): LucumaTableIdsMutationResponse

  """
  delete single row from the table: "lucumaTableIds"
  """
  deleteLucumaTableIdsByPk(id: String!): LucumaTableIds

  """
  delete data from the table: "lucumaTarget"
  """
  deleteLucumaTarget(
    """filter the rows which have to be deleted"""
    where: LucumaTargetBoolExp!
  ): LucumaTargetMutationResponse

  """
  delete single row from the table: "lucumaTarget"
  """
  deleteLucumaTargetByPk(targetId: String!): LucumaTarget

  """
  delete data from the table: "lucumaUser"
  """
  deleteLucumaUser(
    """filter the rows which have to be deleted"""
    where: LucumaUserBoolExp!
  ): LucumaUserMutationResponse

  """
  delete single row from the table: "lucumaUser"
  """
  deleteLucumaUserByPk(userId: String!): LucumaUser

  """
  delete data from the table: "lucumaUserPreferences"
  """
  deleteLucumaUserPreferences(
    """filter the rows which have to be deleted"""
    where: LucumaUserPreferencesBoolExp!
  ): LucumaUserPreferencesMutationResponse

  """
  delete single row from the table: "lucumaUserPreferences"
  """
  deleteLucumaUserPreferencesByPk(userId: String!): LucumaUserPreferences

  """
  insert data into the table: "exploreChartType"
  """
  insertExploreChartType(
    """the rows to be inserted"""
    objects: [ExploreChartTypeInsertInput!]!

    """upsert condition"""
    onConflict: ExploreChartTypeOnConflict
  ): ExploreChartTypeMutationResponse

  """
  insert a single row into the table: "exploreChartType"
  """
  insertExploreChartTypeOne(
    """the row to be inserted"""
    object: ExploreChartTypeInsertInput!

    """upsert condition"""
    onConflict: ExploreChartTypeOnConflict
  ): ExploreChartType

  """
  insert data into the table: "exploreFinderChart"
  """
  insertExploreFinderChart(
    """the rows to be inserted"""
    objects: [ExploreFinderChartInsertInput!]!

    """upsert condition"""
    onConflict: ExploreFinderChartOnConflict
  ): ExploreFinderChartMutationResponse

  """
  insert a single row into the table: "exploreFinderChart"
  """
  insertExploreFinderChartOne(
    """the row to be inserted"""
    object: ExploreFinderChartInsertInput!

    """upsert condition"""
    onConflict: ExploreFinderChartOnConflict
  ): ExploreFinderChart

  """
  insert data into the table: "explorePlotRange"
  """
  insertExplorePlotRange(
    """the rows to be inserted"""
    objects: [ExplorePlotRangeInsertInput!]!

    """upsert condition"""
    onConflict: ExplorePlotRangeOnConflict
  ): ExplorePlotRangeMutationResponse

  """
  insert a single row into the table: "explorePlotRange"
  """
  insertExplorePlotRangeOne(
    """the row to be inserted"""
    object: ExplorePlotRangeInsertInput!

    """upsert condition"""
    onConflict: ExplorePlotRangeOnConflict
  ): ExplorePlotRange

  """
  insert data into the table: "explorePlotTime"
  """
  insertExplorePlotTime(
    """the rows to be inserted"""
    objects: [ExplorePlotTimeInsertInput!]!

    """upsert condition"""
    onConflict: ExplorePlotTimeOnConflict
  ): ExplorePlotTimeMutationResponse

  """
  insert a single row into the table: "explorePlotTime"
  """
  insertExplorePlotTimeOne(
    """the row to be inserted"""
    object: ExplorePlotTimeInsertInput!

    """upsert condition"""
    onConflict: ExplorePlotTimeOnConflict
  ): ExplorePlotTime

  """
  insert data into the table: "exploreTargetPreferences"
  """
  insertExploreTargetPreferences(
    """the rows to be inserted"""
    objects: [ExploreTargetPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: ExploreTargetPreferencesOnConflict
  ): ExploreTargetPreferencesMutationResponse

  """
  insert a single row into the table: "exploreTargetPreferences"
  """
  insertExploreTargetPreferencesOne(
    """the row to be inserted"""
    object: ExploreTargetPreferencesInsertInput!

    """upsert condition"""
    onConflict: ExploreTargetPreferencesOnConflict
  ): ExploreTargetPreferences

  """
  insert data into the table: "lucumaGridBreakpointName"
  """
  insertLucumaGridBreakpointName(
    """the rows to be inserted"""
    objects: [LucumaGridBreakpointNameInsertInput!]!

    """upsert condition"""
    onConflict: LucumaGridBreakpointNameOnConflict
  ): LucumaGridBreakpointNameMutationResponse

  """
  insert a single row into the table: "lucumaGridBreakpointName"
  """
  insertLucumaGridBreakpointNameOne(
    """the row to be inserted"""
    object: LucumaGridBreakpointNameInsertInput!

    """upsert condition"""
    onConflict: LucumaGridBreakpointNameOnConflict
  ): LucumaGridBreakpointName

  """
  insert data into the table: "lucumaGridLayoutId"
  """
  insertLucumaGridLayoutId(
    """the rows to be inserted"""
    objects: [LucumaGridLayoutIdInsertInput!]!

    """upsert condition"""
    onConflict: LucumaGridLayoutIdOnConflict
  ): LucumaGridLayoutIdMutationResponse

  """
  insert a single row into the table: "lucumaGridLayoutId"
  """
  insertLucumaGridLayoutIdOne(
    """the row to be inserted"""
    object: LucumaGridLayoutIdInsertInput!

    """upsert condition"""
    onConflict: LucumaGridLayoutIdOnConflict
  ): LucumaGridLayoutId

  """
  insert data into the table: "lucumaGridLayoutPositions"
  """
  insertLucumaGridLayoutPositions(
    """the rows to be inserted"""
    objects: [LucumaGridLayoutPositionsInsertInput!]!

    """upsert condition"""
    onConflict: LucumaGridLayoutPositionsOnConflict
  ): LucumaGridLayoutPositionsMutationResponse

  """
  insert a single row into the table: "lucumaGridLayoutPositions"
  """
  insertLucumaGridLayoutPositionsOne(
    """the row to be inserted"""
    object: LucumaGridLayoutPositionsInsertInput!

    """upsert condition"""
    onConflict: LucumaGridLayoutPositionsOnConflict
  ): LucumaGridLayoutPositions

  """
  insert data into the table: "lucumaItcPlotPreferences"
  """
  insertLucumaItcPlotPreferences(
    """the rows to be inserted"""
    objects: [LucumaItcPlotPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: LucumaItcPlotPreferencesOnConflict
  ): LucumaItcPlotPreferencesMutationResponse

  """
  insert a single row into the table: "lucumaItcPlotPreferences"
  """
  insertLucumaItcPlotPreferencesOne(
    """the row to be inserted"""
    object: LucumaItcPlotPreferencesInsertInput!

    """upsert condition"""
    onConflict: LucumaItcPlotPreferencesOnConflict
  ): LucumaItcPlotPreferences

  """
  insert data into the table: "lucumaObservation"
  """
  insertLucumaObservation(
    """the rows to be inserted"""
    objects: [LucumaObservationInsertInput!]!

    """upsert condition"""
    onConflict: LucumaObservationOnConflict
  ): LucumaObservationMutationResponse

  """
  insert a single row into the table: "lucumaObservation"
  """
  insertLucumaObservationOne(
    """the row to be inserted"""
    object: LucumaObservationInsertInput!

    """upsert condition"""
    onConflict: LucumaObservationOnConflict
  ): LucumaObservation

  """
  insert data into the table: "lucumaSortDirection"
  """
  insertLucumaSortDirection(
    """the rows to be inserted"""
    objects: [LucumaSortDirectionInsertInput!]!

    """upsert condition"""
    onConflict: LucumaSortDirectionOnConflict
  ): LucumaSortDirectionMutationResponse

  """
  insert a single row into the table: "lucumaSortDirection"
  """
  insertLucumaSortDirectionOne(
    """the row to be inserted"""
    object: LucumaSortDirectionInsertInput!

    """upsert condition"""
    onConflict: LucumaSortDirectionOnConflict
  ): LucumaSortDirection

  """
  insert data into the table: "lucumaTableColumnPreferences"
  """
  insertLucumaTableColumnPreferences(
    """the rows to be inserted"""
    objects: [LucumaTableColumnPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: LucumaTableColumnPreferencesOnConflict
  ): LucumaTableColumnPreferencesMutationResponse

  """
  insert a single row into the table: "lucumaTableColumnPreferences"
  """
  insertLucumaTableColumnPreferencesOne(
    """the row to be inserted"""
    object: LucumaTableColumnPreferencesInsertInput!

    """upsert condition"""
    onConflict: LucumaTableColumnPreferencesOnConflict
  ): LucumaTableColumnPreferences

  """
  insert data into the table: "lucumaTableIds"
  """
  insertLucumaTableIds(
    """the rows to be inserted"""
    objects: [LucumaTableIdsInsertInput!]!

    """upsert condition"""
    onConflict: LucumaTableIdsOnConflict
  ): LucumaTableIdsMutationResponse

  """
  insert a single row into the table: "lucumaTableIds"
  """
  insertLucumaTableIdsOne(
    """the row to be inserted"""
    object: LucumaTableIdsInsertInput!

    """upsert condition"""
    onConflict: LucumaTableIdsOnConflict
  ): LucumaTableIds

  """
  insert data into the table: "lucumaTarget"
  """
  insertLucumaTarget(
    """the rows to be inserted"""
    objects: [LucumaTargetInsertInput!]!

    """upsert condition"""
    onConflict: LucumaTargetOnConflict
  ): LucumaTargetMutationResponse

  """
  insert a single row into the table: "lucumaTarget"
  """
  insertLucumaTargetOne(
    """the row to be inserted"""
    object: LucumaTargetInsertInput!

    """upsert condition"""
    onConflict: LucumaTargetOnConflict
  ): LucumaTarget

  """
  insert data into the table: "lucumaUser"
  """
  insertLucumaUser(
    """the rows to be inserted"""
    objects: [LucumaUserInsertInput!]!

    """upsert condition"""
    onConflict: LucumaUserOnConflict
  ): LucumaUserMutationResponse

  """
  insert a single row into the table: "lucumaUser"
  """
  insertLucumaUserOne(
    """the row to be inserted"""
    object: LucumaUserInsertInput!

    """upsert condition"""
    onConflict: LucumaUserOnConflict
  ): LucumaUser

  """
  insert data into the table: "lucumaUserPreferences"
  """
  insertLucumaUserPreferences(
    """the rows to be inserted"""
    objects: [LucumaUserPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: LucumaUserPreferencesOnConflict
  ): LucumaUserPreferencesMutationResponse

  """
  insert a single row into the table: "lucumaUserPreferences"
  """
  insertLucumaUserPreferencesOne(
    """the row to be inserted"""
    object: LucumaUserPreferencesInsertInput!

    """upsert condition"""
    onConflict: LucumaUserPreferencesOnConflict
  ): LucumaUserPreferences

  """
  update data of the table: "exploreChartType"
  """
  updateExploreChartType(
    """sets the columns of the filtered rows to the given values"""
    _set: ExploreChartTypeSetInput

    """filter the rows which have to be updated"""
    where: ExploreChartTypeBoolExp!
  ): ExploreChartTypeMutationResponse

  """
  update single row of the table: "exploreChartType"
  """
  updateExploreChartTypeByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: ExploreChartTypeSetInput
    pk_columns: ExploreChartTypePkColumnsInput!
  ): ExploreChartType

  """
  update multiples rows of table: "exploreChartType"
  """
  updateExploreChartTypeMany(
    """updates to execute, in order"""
    updates: [ExploreChartTypeUpdates!]!
  ): [ExploreChartTypeMutationResponse]

  """
  update data of the table: "exploreFinderChart"
  """
  updateExploreFinderChart(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ExploreFinderChartIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ExploreFinderChartSetInput

    """filter the rows which have to be updated"""
    where: ExploreFinderChartBoolExp!
  ): ExploreFinderChartMutationResponse

  """
  update single row of the table: "exploreFinderChart"
  """
  updateExploreFinderChartByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ExploreFinderChartIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ExploreFinderChartSetInput
    pk_columns: ExploreFinderChartPkColumnsInput!
  ): ExploreFinderChart

  """
  update multiples rows of table: "exploreFinderChart"
  """
  updateExploreFinderChartMany(
    """updates to execute, in order"""
    updates: [ExploreFinderChartUpdates!]!
  ): [ExploreFinderChartMutationResponse]

  """
  update data of the table: "explorePlotRange"
  """
  updateExplorePlotRange(
    """sets the columns of the filtered rows to the given values"""
    _set: ExplorePlotRangeSetInput

    """filter the rows which have to be updated"""
    where: ExplorePlotRangeBoolExp!
  ): ExplorePlotRangeMutationResponse

  """
  update single row of the table: "explorePlotRange"
  """
  updateExplorePlotRangeByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: ExplorePlotRangeSetInput
    pk_columns: ExplorePlotRangePkColumnsInput!
  ): ExplorePlotRange

  """
  update multiples rows of table: "explorePlotRange"
  """
  updateExplorePlotRangeMany(
    """updates to execute, in order"""
    updates: [ExplorePlotRangeUpdates!]!
  ): [ExplorePlotRangeMutationResponse]

  """
  update data of the table: "explorePlotTime"
  """
  updateExplorePlotTime(
    """sets the columns of the filtered rows to the given values"""
    _set: ExplorePlotTimeSetInput

    """filter the rows which have to be updated"""
    where: ExplorePlotTimeBoolExp!
  ): ExplorePlotTimeMutationResponse

  """
  update single row of the table: "explorePlotTime"
  """
  updateExplorePlotTimeByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: ExplorePlotTimeSetInput
    pk_columns: ExplorePlotTimePkColumnsInput!
  ): ExplorePlotTime

  """
  update multiples rows of table: "explorePlotTime"
  """
  updateExplorePlotTimeMany(
    """updates to execute, in order"""
    updates: [ExplorePlotTimeUpdates!]!
  ): [ExplorePlotTimeMutationResponse]

  """
  update data of the table: "exploreTargetPreferences"
  """
  updateExploreTargetPreferences(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ExploreTargetPreferencesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ExploreTargetPreferencesSetInput

    """filter the rows which have to be updated"""
    where: ExploreTargetPreferencesBoolExp!
  ): ExploreTargetPreferencesMutationResponse

  """
  update single row of the table: "exploreTargetPreferences"
  """
  updateExploreTargetPreferencesByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ExploreTargetPreferencesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ExploreTargetPreferencesSetInput
    pk_columns: ExploreTargetPreferencesPkColumnsInput!
  ): ExploreTargetPreferences

  """
  update multiples rows of table: "exploreTargetPreferences"
  """
  updateExploreTargetPreferencesMany(
    """updates to execute, in order"""
    updates: [ExploreTargetPreferencesUpdates!]!
  ): [ExploreTargetPreferencesMutationResponse]

  """
  update data of the table: "lucumaGridBreakpointName"
  """
  updateLucumaGridBreakpointName(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridBreakpointNameSetInput

    """filter the rows which have to be updated"""
    where: LucumaGridBreakpointNameBoolExp!
  ): LucumaGridBreakpointNameMutationResponse

  """
  update single row of the table: "lucumaGridBreakpointName"
  """
  updateLucumaGridBreakpointNameByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridBreakpointNameSetInput
    pk_columns: LucumaGridBreakpointNamePkColumnsInput!
  ): LucumaGridBreakpointName

  """
  update multiples rows of table: "lucumaGridBreakpointName"
  """
  updateLucumaGridBreakpointNameMany(
    """updates to execute, in order"""
    updates: [LucumaGridBreakpointNameUpdates!]!
  ): [LucumaGridBreakpointNameMutationResponse]

  """
  update data of the table: "lucumaGridLayoutId"
  """
  updateLucumaGridLayoutId(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridLayoutIdSetInput

    """filter the rows which have to be updated"""
    where: LucumaGridLayoutIdBoolExp!
  ): LucumaGridLayoutIdMutationResponse

  """
  update single row of the table: "lucumaGridLayoutId"
  """
  updateLucumaGridLayoutIdByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridLayoutIdSetInput
    pk_columns: LucumaGridLayoutIdPkColumnsInput!
  ): LucumaGridLayoutId

  """
  update multiples rows of table: "lucumaGridLayoutId"
  """
  updateLucumaGridLayoutIdMany(
    """updates to execute, in order"""
    updates: [LucumaGridLayoutIdUpdates!]!
  ): [LucumaGridLayoutIdMutationResponse]

  """
  update data of the table: "lucumaGridLayoutPositions"
  """
  updateLucumaGridLayoutPositions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaGridLayoutPositionsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridLayoutPositionsSetInput

    """filter the rows which have to be updated"""
    where: LucumaGridLayoutPositionsBoolExp!
  ): LucumaGridLayoutPositionsMutationResponse

  """
  update single row of the table: "lucumaGridLayoutPositions"
  """
  updateLucumaGridLayoutPositionsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaGridLayoutPositionsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridLayoutPositionsSetInput
    pk_columns: LucumaGridLayoutPositionsPkColumnsInput!
  ): LucumaGridLayoutPositions

  """
  update multiples rows of table: "lucumaGridLayoutPositions"
  """
  updateLucumaGridLayoutPositionsMany(
    """updates to execute, in order"""
    updates: [LucumaGridLayoutPositionsUpdates!]!
  ): [LucumaGridLayoutPositionsMutationResponse]

  """
  update data of the table: "lucumaItcPlotPreferences"
  """
  updateLucumaItcPlotPreferences(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaItcPlotPreferencesSetInput

    """filter the rows which have to be updated"""
    where: LucumaItcPlotPreferencesBoolExp!
  ): LucumaItcPlotPreferencesMutationResponse

  """
  update single row of the table: "lucumaItcPlotPreferences"
  """
  updateLucumaItcPlotPreferencesByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaItcPlotPreferencesSetInput
    pk_columns: LucumaItcPlotPreferencesPkColumnsInput!
  ): LucumaItcPlotPreferences

  """
  update multiples rows of table: "lucumaItcPlotPreferences"
  """
  updateLucumaItcPlotPreferencesMany(
    """updates to execute, in order"""
    updates: [LucumaItcPlotPreferencesUpdates!]!
  ): [LucumaItcPlotPreferencesMutationResponse]

  """
  update data of the table: "lucumaObservation"
  """
  updateLucumaObservation(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaObservationSetInput

    """filter the rows which have to be updated"""
    where: LucumaObservationBoolExp!
  ): LucumaObservationMutationResponse

  """
  update single row of the table: "lucumaObservation"
  """
  updateLucumaObservationByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaObservationSetInput
    pk_columns: LucumaObservationPkColumnsInput!
  ): LucumaObservation

  """
  update multiples rows of table: "lucumaObservation"
  """
  updateLucumaObservationMany(
    """updates to execute, in order"""
    updates: [LucumaObservationUpdates!]!
  ): [LucumaObservationMutationResponse]

  """
  update data of the table: "lucumaSortDirection"
  """
  updateLucumaSortDirection(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaSortDirectionSetInput

    """filter the rows which have to be updated"""
    where: LucumaSortDirectionBoolExp!
  ): LucumaSortDirectionMutationResponse

  """
  update single row of the table: "lucumaSortDirection"
  """
  updateLucumaSortDirectionByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaSortDirectionSetInput
    pk_columns: LucumaSortDirectionPkColumnsInput!
  ): LucumaSortDirection

  """
  update multiples rows of table: "lucumaSortDirection"
  """
  updateLucumaSortDirectionMany(
    """updates to execute, in order"""
    updates: [LucumaSortDirectionUpdates!]!
  ): [LucumaSortDirectionMutationResponse]

  """
  update data of the table: "lucumaTableColumnPreferences"
  """
  updateLucumaTableColumnPreferences(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaTableColumnPreferencesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTableColumnPreferencesSetInput

    """filter the rows which have to be updated"""
    where: LucumaTableColumnPreferencesBoolExp!
  ): LucumaTableColumnPreferencesMutationResponse

  """
  update single row of the table: "lucumaTableColumnPreferences"
  """
  updateLucumaTableColumnPreferencesByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaTableColumnPreferencesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTableColumnPreferencesSetInput
    pk_columns: LucumaTableColumnPreferencesPkColumnsInput!
  ): LucumaTableColumnPreferences

  """
  update multiples rows of table: "lucumaTableColumnPreferences"
  """
  updateLucumaTableColumnPreferencesMany(
    """updates to execute, in order"""
    updates: [LucumaTableColumnPreferencesUpdates!]!
  ): [LucumaTableColumnPreferencesMutationResponse]

  """
  update data of the table: "lucumaTableIds"
  """
  updateLucumaTableIds(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTableIdsSetInput

    """filter the rows which have to be updated"""
    where: LucumaTableIdsBoolExp!
  ): LucumaTableIdsMutationResponse

  """
  update single row of the table: "lucumaTableIds"
  """
  updateLucumaTableIdsByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTableIdsSetInput
    pk_columns: LucumaTableIdsPkColumnsInput!
  ): LucumaTableIds

  """
  update multiples rows of table: "lucumaTableIds"
  """
  updateLucumaTableIdsMany(
    """updates to execute, in order"""
    updates: [LucumaTableIdsUpdates!]!
  ): [LucumaTableIdsMutationResponse]

  """
  update data of the table: "lucumaTarget"
  """
  updateLucumaTarget(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTargetSetInput

    """filter the rows which have to be updated"""
    where: LucumaTargetBoolExp!
  ): LucumaTargetMutationResponse

  """
  update single row of the table: "lucumaTarget"
  """
  updateLucumaTargetByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTargetSetInput
    pk_columns: LucumaTargetPkColumnsInput!
  ): LucumaTarget

  """
  update multiples rows of table: "lucumaTarget"
  """
  updateLucumaTargetMany(
    """updates to execute, in order"""
    updates: [LucumaTargetUpdates!]!
  ): [LucumaTargetMutationResponse]

  """
  update data of the table: "lucumaUser"
  """
  updateLucumaUser(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserSetInput

    """filter the rows which have to be updated"""
    where: LucumaUserBoolExp!
  ): LucumaUserMutationResponse

  """
  update single row of the table: "lucumaUser"
  """
  updateLucumaUserByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserSetInput
    pk_columns: LucumaUserPkColumnsInput!
  ): LucumaUser

  """
  update multiples rows of table: "lucumaUser"
  """
  updateLucumaUserMany(
    """updates to execute, in order"""
    updates: [LucumaUserUpdates!]!
  ): [LucumaUserMutationResponse]

  """
  update data of the table: "lucumaUserPreferences"
  """
  updateLucumaUserPreferences(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserPreferencesSetInput

    """filter the rows which have to be updated"""
    where: LucumaUserPreferencesBoolExp!
  ): LucumaUserPreferencesMutationResponse

  """
  update single row of the table: "lucumaUserPreferences"
  """
  updateLucumaUserPreferencesByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserPreferencesSetInput
    pk_columns: LucumaUserPreferencesPkColumnsInput!
  ): LucumaUserPreferences

  """
  update multiples rows of table: "lucumaUserPreferences"
  """
  updateLucumaUserPreferencesMany(
    """updates to execute, in order"""
    updates: [LucumaUserPreferencesUpdates!]!
  ): [LucumaUserPreferencesMutationResponse]
}

type Query {
  """
  fetch data from the table: "exploreChartType"
  """
  exploreChartType(
    """distinct select on columns"""
    distinctOn: [ExploreChartTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreChartTypeOrderBy!]

    """filter the rows returned"""
    where: ExploreChartTypeBoolExp
  ): [ExploreChartType!]!

  """
  fetch aggregated fields from the table: "exploreChartType"
  """
  exploreChartTypeAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreChartTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreChartTypeOrderBy!]

    """filter the rows returned"""
    where: ExploreChartTypeBoolExp
  ): ExploreChartTypeAggregate!

  """
  fetch data from the table: "exploreChartType" using primary key columns
  """
  exploreChartTypeByPk(id: String!): ExploreChartType

  """
  fetch data from the table: "exploreFinderChart"
  """
  exploreFinderChart(
    """distinct select on columns"""
    distinctOn: [ExploreFinderChartSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreFinderChartOrderBy!]

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): [ExploreFinderChart!]!

  """
  fetch aggregated fields from the table: "exploreFinderChart"
  """
  exploreFinderChartAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreFinderChartSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreFinderChartOrderBy!]

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): ExploreFinderChartAggregate!

  """
  fetch data from the table: "exploreFinderChart" using primary key columns
  """
  exploreFinderChartByPk(attachmentId: String!, observationId: String!): ExploreFinderChart

  """
  fetch data from the table: "explorePlotRange"
  """
  explorePlotRange(
    """distinct select on columns"""
    distinctOn: [ExplorePlotRangeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotRangeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotRangeBoolExp
  ): [ExplorePlotRange!]!

  """
  fetch aggregated fields from the table: "explorePlotRange"
  """
  explorePlotRangeAggregate(
    """distinct select on columns"""
    distinctOn: [ExplorePlotRangeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotRangeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotRangeBoolExp
  ): ExplorePlotRangeAggregate!

  """
  fetch data from the table: "explorePlotRange" using primary key columns
  """
  explorePlotRangeByPk(id: String!): ExplorePlotRange

  """
  fetch data from the table: "explorePlotTime"
  """
  explorePlotTime(
    """distinct select on columns"""
    distinctOn: [ExplorePlotTimeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotTimeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotTimeBoolExp
  ): [ExplorePlotTime!]!

  """
  fetch aggregated fields from the table: "explorePlotTime"
  """
  explorePlotTimeAggregate(
    """distinct select on columns"""
    distinctOn: [ExplorePlotTimeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotTimeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotTimeBoolExp
  ): ExplorePlotTimeAggregate!

  """fetch data from the table: "explorePlotTime" using primary key columns"""
  explorePlotTimeByPk(id: String!): ExplorePlotTime

  """
  fetch data from the table: "exploreTargetPreferences"
  """
  exploreTargetPreferences(
    """distinct select on columns"""
    distinctOn: [ExploreTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): [ExploreTargetPreferences!]!

  """
  fetch aggregated fields from the table: "exploreTargetPreferences"
  """
  exploreTargetPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): ExploreTargetPreferencesAggregate!

  """
  fetch data from the table: "exploreTargetPreferences" using primary key columns
  """
  exploreTargetPreferencesByPk(targetId: String!, userId: String!): ExploreTargetPreferences

  """
  fetch data from the table: "lucumaGridBreakpointName"
  """
  lucumaGridBreakpointName(
    """distinct select on columns"""
    distinctOn: [LucumaGridBreakpointNameSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridBreakpointNameOrderBy!]

    """filter the rows returned"""
    where: LucumaGridBreakpointNameBoolExp
  ): [LucumaGridBreakpointName!]!

  """
  fetch aggregated fields from the table: "lucumaGridBreakpointName"
  """
  lucumaGridBreakpointNameAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridBreakpointNameSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridBreakpointNameOrderBy!]

    """filter the rows returned"""
    where: LucumaGridBreakpointNameBoolExp
  ): LucumaGridBreakpointNameAggregate!

  """
  fetch data from the table: "lucumaGridBreakpointName" using primary key columns
  """
  lucumaGridBreakpointNameByPk(id: String!): LucumaGridBreakpointName

  """
  fetch data from the table: "lucumaGridLayoutId"
  """
  lucumaGridLayoutId(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutIdSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutIdOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutIdBoolExp
  ): [LucumaGridLayoutId!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutId"
  """
  lucumaGridLayoutIdAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutIdSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutIdOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutIdBoolExp
  ): LucumaGridLayoutIdAggregate!

  """
  fetch data from the table: "lucumaGridLayoutId" using primary key columns
  """
  lucumaGridLayoutIdByPk(id: String!): LucumaGridLayoutId

  """
  fetch data from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): [LucumaGridLayoutPositions!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositionsAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): LucumaGridLayoutPositionsAggregate!

  """
  fetch data from the table: "lucumaGridLayoutPositions" using primary key columns
  """
  lucumaGridLayoutPositionsByPk(breakpointName: LucumaGridBreakpointNameEnum!, section: LucumaGridLayoutIdEnum!, tile: String!, userId: String!): LucumaGridLayoutPositions

  """
  fetch data from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!

  """An aggregate relationship"""
  lucumaItcPlotPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): LucumaItcPlotPreferencesAggregate!

  """
  fetch data from the table: "lucumaItcPlotPreferences" using primary key columns
  """
  lucumaItcPlotPreferencesByPk(observationId: String!, userId: String!): LucumaItcPlotPreferences

  """
  fetch data from the table: "lucumaObservation"
  """
  lucumaObservation(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): [LucumaObservation!]!

  """
  fetch aggregated fields from the table: "lucumaObservation"
  """
  lucumaObservationAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): LucumaObservationAggregate!

  """
  fetch data from the table: "lucumaObservation" using primary key columns
  """
  lucumaObservationByPk(observationId: String!): LucumaObservation

  """
  fetch data from the table: "lucumaSortDirection"
  """
  lucumaSortDirection(
    """distinct select on columns"""
    distinctOn: [LucumaSortDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaSortDirectionOrderBy!]

    """filter the rows returned"""
    where: LucumaSortDirectionBoolExp
  ): [LucumaSortDirection!]!

  """
  fetch aggregated fields from the table: "lucumaSortDirection"
  """
  lucumaSortDirectionAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaSortDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaSortDirectionOrderBy!]

    """filter the rows returned"""
    where: LucumaSortDirectionBoolExp
  ): LucumaSortDirectionAggregate!

  """
  fetch data from the table: "lucumaSortDirection" using primary key columns
  """
  lucumaSortDirectionByPk(id: String!): LucumaSortDirection

  """
  fetch data from the table: "lucumaTableColumnPreferences"
  """
  lucumaTableColumnPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaTableColumnPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableColumnPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTableColumnPreferencesBoolExp
  ): [LucumaTableColumnPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaTableColumnPreferences"
  """
  lucumaTableColumnPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTableColumnPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableColumnPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTableColumnPreferencesBoolExp
  ): LucumaTableColumnPreferencesAggregate!

  """
  fetch data from the table: "lucumaTableColumnPreferences" using primary key columns
  """
  lucumaTableColumnPreferencesByPk(columnId: String!, tableId: LucumaTableIdsEnum!, userId: String!): LucumaTableColumnPreferences

  """
  fetch data from the table: "lucumaTableIds"
  """
  lucumaTableIds(
    """distinct select on columns"""
    distinctOn: [LucumaTableIdsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableIdsOrderBy!]

    """filter the rows returned"""
    where: LucumaTableIdsBoolExp
  ): [LucumaTableIds!]!

  """
  fetch aggregated fields from the table: "lucumaTableIds"
  """
  lucumaTableIdsAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTableIdsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableIdsOrderBy!]

    """filter the rows returned"""
    where: LucumaTableIdsBoolExp
  ): LucumaTableIdsAggregate!

  """fetch data from the table: "lucumaTableIds" using primary key columns"""
  lucumaTableIdsByPk(id: String!): LucumaTableIds

  """
  fetch data from the table: "lucumaTarget"
  """
  lucumaTarget(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): [LucumaTarget!]!

  """
  fetch aggregated fields from the table: "lucumaTarget"
  """
  lucumaTargetAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): LucumaTargetAggregate!

  """fetch data from the table: "lucumaTarget" using primary key columns"""
  lucumaTargetByPk(targetId: String!): LucumaTarget

  """
  fetch data from the table: "lucumaUser"
  """
  lucumaUser(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): [LucumaUser!]!

  """
  fetch aggregated fields from the table: "lucumaUser"
  """
  lucumaUserAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): LucumaUserAggregate!

  """fetch data from the table: "lucumaUser" using primary key columns"""
  lucumaUserByPk(userId: String!): LucumaUser

  """
  fetch data from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): [LucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): LucumaUserPreferencesAggregate!

  """
  fetch data from the table: "lucumaUserPreferences" using primary key columns
  """
  lucumaUserPreferencesByPk(userId: String!): LucumaUserPreferences
}

type Subscription {
  """
  fetch data from the table: "exploreChartType"
  """
  exploreChartType(
    """distinct select on columns"""
    distinctOn: [ExploreChartTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreChartTypeOrderBy!]

    """filter the rows returned"""
    where: ExploreChartTypeBoolExp
  ): [ExploreChartType!]!

  """
  fetch aggregated fields from the table: "exploreChartType"
  """
  exploreChartTypeAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreChartTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreChartTypeOrderBy!]

    """filter the rows returned"""
    where: ExploreChartTypeBoolExp
  ): ExploreChartTypeAggregate!

  """
  fetch data from the table: "exploreChartType" using primary key columns
  """
  exploreChartTypeByPk(id: String!): ExploreChartType

  """
  fetch data from the table in a streaming manner : "exploreChartType"
  """
  exploreChartTypeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [exploreChartType_streamCursorInput]!

    """filter the rows returned"""
    where: ExploreChartTypeBoolExp
  ): [ExploreChartType!]!

  """
  fetch data from the table: "exploreFinderChart"
  """
  exploreFinderChart(
    """distinct select on columns"""
    distinctOn: [ExploreFinderChartSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreFinderChartOrderBy!]

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): [ExploreFinderChart!]!

  """
  fetch aggregated fields from the table: "exploreFinderChart"
  """
  exploreFinderChartAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreFinderChartSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreFinderChartOrderBy!]

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): ExploreFinderChartAggregate!

  """
  fetch data from the table: "exploreFinderChart" using primary key columns
  """
  exploreFinderChartByPk(attachmentId: String!, observationId: String!): ExploreFinderChart

  """
  fetch data from the table in a streaming manner : "exploreFinderChart"
  """
  exploreFinderChartStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [exploreFinderChart_streamCursorInput]!

    """filter the rows returned"""
    where: ExploreFinderChartBoolExp
  ): [ExploreFinderChart!]!

  """
  fetch data from the table: "explorePlotRange"
  """
  explorePlotRange(
    """distinct select on columns"""
    distinctOn: [ExplorePlotRangeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotRangeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotRangeBoolExp
  ): [ExplorePlotRange!]!

  """
  fetch aggregated fields from the table: "explorePlotRange"
  """
  explorePlotRangeAggregate(
    """distinct select on columns"""
    distinctOn: [ExplorePlotRangeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotRangeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotRangeBoolExp
  ): ExplorePlotRangeAggregate!

  """
  fetch data from the table: "explorePlotRange" using primary key columns
  """
  explorePlotRangeByPk(id: String!): ExplorePlotRange

  """
  fetch data from the table in a streaming manner : "explorePlotRange"
  """
  explorePlotRangeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [explorePlotRange_streamCursorInput]!

    """filter the rows returned"""
    where: ExplorePlotRangeBoolExp
  ): [ExplorePlotRange!]!

  """
  fetch data from the table: "explorePlotTime"
  """
  explorePlotTime(
    """distinct select on columns"""
    distinctOn: [ExplorePlotTimeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotTimeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotTimeBoolExp
  ): [ExplorePlotTime!]!

  """
  fetch aggregated fields from the table: "explorePlotTime"
  """
  explorePlotTimeAggregate(
    """distinct select on columns"""
    distinctOn: [ExplorePlotTimeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExplorePlotTimeOrderBy!]

    """filter the rows returned"""
    where: ExplorePlotTimeBoolExp
  ): ExplorePlotTimeAggregate!

  """fetch data from the table: "explorePlotTime" using primary key columns"""
  explorePlotTimeByPk(id: String!): ExplorePlotTime

  """
  fetch data from the table in a streaming manner : "explorePlotTime"
  """
  explorePlotTimeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [explorePlotTime_streamCursorInput]!

    """filter the rows returned"""
    where: ExplorePlotTimeBoolExp
  ): [ExplorePlotTime!]!

  """
  fetch data from the table: "exploreTargetPreferences"
  """
  exploreTargetPreferences(
    """distinct select on columns"""
    distinctOn: [ExploreTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): [ExploreTargetPreferences!]!

  """
  fetch aggregated fields from the table: "exploreTargetPreferences"
  """
  exploreTargetPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [ExploreTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExploreTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): ExploreTargetPreferencesAggregate!

  """
  fetch data from the table: "exploreTargetPreferences" using primary key columns
  """
  exploreTargetPreferencesByPk(targetId: String!, userId: String!): ExploreTargetPreferences

  """
  fetch data from the table in a streaming manner : "exploreTargetPreferences"
  """
  exploreTargetPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [exploreTargetPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: ExploreTargetPreferencesBoolExp
  ): [ExploreTargetPreferences!]!

  """
  fetch data from the table: "lucumaGridBreakpointName"
  """
  lucumaGridBreakpointName(
    """distinct select on columns"""
    distinctOn: [LucumaGridBreakpointNameSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridBreakpointNameOrderBy!]

    """filter the rows returned"""
    where: LucumaGridBreakpointNameBoolExp
  ): [LucumaGridBreakpointName!]!

  """
  fetch aggregated fields from the table: "lucumaGridBreakpointName"
  """
  lucumaGridBreakpointNameAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridBreakpointNameSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridBreakpointNameOrderBy!]

    """filter the rows returned"""
    where: LucumaGridBreakpointNameBoolExp
  ): LucumaGridBreakpointNameAggregate!

  """
  fetch data from the table: "lucumaGridBreakpointName" using primary key columns
  """
  lucumaGridBreakpointNameByPk(id: String!): LucumaGridBreakpointName

  """
  fetch data from the table in a streaming manner : "lucumaGridBreakpointName"
  """
  lucumaGridBreakpointNameStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaGridBreakpointName_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaGridBreakpointNameBoolExp
  ): [LucumaGridBreakpointName!]!

  """
  fetch data from the table: "lucumaGridLayoutId"
  """
  lucumaGridLayoutId(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutIdSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutIdOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutIdBoolExp
  ): [LucumaGridLayoutId!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutId"
  """
  lucumaGridLayoutIdAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutIdSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutIdOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutIdBoolExp
  ): LucumaGridLayoutIdAggregate!

  """
  fetch data from the table: "lucumaGridLayoutId" using primary key columns
  """
  lucumaGridLayoutIdByPk(id: String!): LucumaGridLayoutId

  """
  fetch data from the table in a streaming manner : "lucumaGridLayoutId"
  """
  lucumaGridLayoutIdStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaGridLayoutId_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaGridLayoutIdBoolExp
  ): [LucumaGridLayoutId!]!

  """
  fetch data from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): [LucumaGridLayoutPositions!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositionsAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): LucumaGridLayoutPositionsAggregate!

  """
  fetch data from the table: "lucumaGridLayoutPositions" using primary key columns
  """
  lucumaGridLayoutPositionsByPk(breakpointName: LucumaGridBreakpointNameEnum!, section: LucumaGridLayoutIdEnum!, tile: String!, userId: String!): LucumaGridLayoutPositions

  """
  fetch data from the table in a streaming manner : "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositionsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaGridLayoutPositions_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): [LucumaGridLayoutPositions!]!

  """
  fetch data from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!

  """An aggregate relationship"""
  lucumaItcPlotPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): LucumaItcPlotPreferencesAggregate!

  """
  fetch data from the table: "lucumaItcPlotPreferences" using primary key columns
  """
  lucumaItcPlotPreferencesByPk(observationId: String!, userId: String!): LucumaItcPlotPreferences

  """
  fetch data from the table in a streaming manner : "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaItcPlotPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!

  """
  fetch data from the table: "lucumaObservation"
  """
  lucumaObservation(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): [LucumaObservation!]!

  """
  fetch aggregated fields from the table: "lucumaObservation"
  """
  lucumaObservationAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): LucumaObservationAggregate!

  """
  fetch data from the table: "lucumaObservation" using primary key columns
  """
  lucumaObservationByPk(observationId: String!): LucumaObservation

  """
  fetch data from the table in a streaming manner : "lucumaObservation"
  """
  lucumaObservationStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaObservation_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): [LucumaObservation!]!

  """
  fetch data from the table: "lucumaSortDirection"
  """
  lucumaSortDirection(
    """distinct select on columns"""
    distinctOn: [LucumaSortDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaSortDirectionOrderBy!]

    """filter the rows returned"""
    where: LucumaSortDirectionBoolExp
  ): [LucumaSortDirection!]!

  """
  fetch aggregated fields from the table: "lucumaSortDirection"
  """
  lucumaSortDirectionAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaSortDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaSortDirectionOrderBy!]

    """filter the rows returned"""
    where: LucumaSortDirectionBoolExp
  ): LucumaSortDirectionAggregate!

  """
  fetch data from the table: "lucumaSortDirection" using primary key columns
  """
  lucumaSortDirectionByPk(id: String!): LucumaSortDirection

  """
  fetch data from the table in a streaming manner : "lucumaSortDirection"
  """
  lucumaSortDirectionStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaSortDirection_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaSortDirectionBoolExp
  ): [LucumaSortDirection!]!

  """
  fetch data from the table: "lucumaTableColumnPreferences"
  """
  lucumaTableColumnPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaTableColumnPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableColumnPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTableColumnPreferencesBoolExp
  ): [LucumaTableColumnPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaTableColumnPreferences"
  """
  lucumaTableColumnPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTableColumnPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableColumnPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTableColumnPreferencesBoolExp
  ): LucumaTableColumnPreferencesAggregate!

  """
  fetch data from the table: "lucumaTableColumnPreferences" using primary key columns
  """
  lucumaTableColumnPreferencesByPk(columnId: String!, tableId: LucumaTableIdsEnum!, userId: String!): LucumaTableColumnPreferences

  """
  fetch data from the table in a streaming manner : "lucumaTableColumnPreferences"
  """
  lucumaTableColumnPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTableColumnPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaTableColumnPreferencesBoolExp
  ): [LucumaTableColumnPreferences!]!

  """
  fetch data from the table: "lucumaTableIds"
  """
  lucumaTableIds(
    """distinct select on columns"""
    distinctOn: [LucumaTableIdsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableIdsOrderBy!]

    """filter the rows returned"""
    where: LucumaTableIdsBoolExp
  ): [LucumaTableIds!]!

  """
  fetch aggregated fields from the table: "lucumaTableIds"
  """
  lucumaTableIdsAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTableIdsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTableIdsOrderBy!]

    """filter the rows returned"""
    where: LucumaTableIdsBoolExp
  ): LucumaTableIdsAggregate!

  """fetch data from the table: "lucumaTableIds" using primary key columns"""
  lucumaTableIdsByPk(id: String!): LucumaTableIds

  """
  fetch data from the table in a streaming manner : "lucumaTableIds"
  """
  lucumaTableIdsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTableIds_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaTableIdsBoolExp
  ): [LucumaTableIds!]!

  """
  fetch data from the table: "lucumaTarget"
  """
  lucumaTarget(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): [LucumaTarget!]!

  """
  fetch aggregated fields from the table: "lucumaTarget"
  """
  lucumaTargetAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): LucumaTargetAggregate!

  """fetch data from the table: "lucumaTarget" using primary key columns"""
  lucumaTargetByPk(targetId: String!): LucumaTarget

  """
  fetch data from the table in a streaming manner : "lucumaTarget"
  """
  lucumaTargetStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTarget_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): [LucumaTarget!]!

  """
  fetch data from the table: "lucumaUser"
  """
  lucumaUser(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): [LucumaUser!]!

  """
  fetch aggregated fields from the table: "lucumaUser"
  """
  lucumaUserAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): LucumaUserAggregate!

  """fetch data from the table: "lucumaUser" using primary key columns"""
  lucumaUserByPk(userId: String!): LucumaUser

  """
  fetch data from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): [LucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): LucumaUserPreferencesAggregate!

  """
  fetch data from the table: "lucumaUserPreferences" using primary key columns
  """
  lucumaUserPreferencesByPk(userId: String!): LucumaUserPreferences

  """
  fetch data from the table in a streaming manner : "lucumaUserPreferences"
  """
  lucumaUserPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaUserPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): [LucumaUserPreferences!]!

  """
  fetch data from the table in a streaming manner : "lucumaUser"
  """
  lucumaUserStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaUser_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): [LucumaUser!]!
}

scalar timestamptz

